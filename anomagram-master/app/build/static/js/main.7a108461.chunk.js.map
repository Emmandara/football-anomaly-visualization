{"version":3,"sources":["components/header/AppHeader.jsx","components/footer/Footer.jsx","components/linechart/LineChart.jsx","components/linechart/SmallLineChart.jsx","components/drawsignal/DrawSignal.jsx","components/helperfunctions/HelperFunctions.jsx","components/composemodel/ComposeModel.jsx","components/histogram/HistogramChart.jsx","components/viz/Viz.jsx","components/rocchart/ROCChart.jsx","components/scatterplot/ScatterPlot.jsx","components/losschart/LossChart.jsx","components/train/models/ae.jsx","components/train/Train.jsx","components/Main.jsx","serviceWorker.js","index.js"],"names":["AppHeader","props","appName","appDescription","className","aria-label","this","href","src","alt","exact","to","target","rel","Component","Footer","style","zIndex","LineChart","state","data","predictedData","color","minChartWidth","width","minChartHeight","height","backgrounOpacity","drawGraph","prevProps","prevState","lastUpdated","setState","updateGraph","chartMargin","top","right","bottom","left","chartWidth","chartHeight","n","length","xScale","d3","domain","range","yScale","xAxis","yAxis","tickSize","self","setupScalesAxes","concat","svg","transition","jointData","i","push","select","duration","attr","line","predictedColor","msearea","call","g","remove","selectAll","margin","x","d","y","y0","Math","min","y1","max","dataset","append","datum","ref","backgroundColor","SmallLineChart","chart","canvas","refs","smalllinecanvas","context","getContext","translate","scale","strokeStyle","prev_stat","move_left_by","stat","the_stat","beginPath","moveTo","lineTo","lineWidth","lineCap","stroke","DrawSignal","signalExtracted","axisOffset","smallChartWidth","smallChartHeight","prevX","currX","prevY","currY","dot_flag","strokeColor","flag","drawMap","Map","signalCount","pointColors","scaleRange","yaxisList","xaxisList","setUpCanvasSize","drawsignaloutcanvas","smallChartContext","largeChartCanvas","drawsignalcanvas","largeChartContext","addEventListener","mouseDownEvent","bind","mouseUpEvent","mouseMoveEvent","mouseOutEvent","touchEndEvent","touchStartEvent","passive","touchMoveEvent","ynScale","zeroArr","Array","fill","closePath","has","set","res","e","fillStyle","fillRect","miniGraph","xPos","yPos","limitValues","setXYCoords","draw","console","log","changedTouches","pageY","pageX","offsetLeft","offsetTop","findxy","updateMove","removeEventListener","size","clearRect","updateCurrentSignal","start","end","prevMean","sum","count","get","rangeMean","values","next","value","curMean","signalHolder","signalHolderScaled","step","floor","xaxis","map","key","yaxis","Button","renderIcon","onClick","clearDrawing","id","registerGAEvent","componentName","eventCategory","eventAction","componentLoadTime","eventTime","Date","getTime","window","location","hostname","ReactGA","event","category","action","label","computeAccuracyGivenThreshold","threshold","predVal","truePositive","trueNegative","falsePositive","falseNegative","forEach","each","mse","acc","tp","tn","fp","fn","tpr","fpr","fnr","tnr","precision","recall","percentToRGB","percent","r","initialize","LeaderLine","animOptions","timing","ComposeModel","hiddenDims","latentDim","maxLayers","minLayers","maxUnits","minUnits","defaultLayerDim","isTraining","latentLineWidth","animationDuration","lineHolder","rightTopAnchor","rightBottomAnchor","leftTopAnchor","leftBottomAnchor","rightMiddle","leftMiddle","blueColor","greyColor","isUpdatable","drawAllLines","network","attributeName","attributeValue","document","querySelector","layer","startId","endId","startEl","getElement","endEl","params","pathType","drawLeaderLine","latentDiv","getElementById","addLayerLines","addEncDecLines","lineId","toRemove","position","newHolder","startElement","endElement","startAnchor","endAnchor","lineColor","pointAnchor","startPlug","endPlug","startPlugColor","path","hide","dash","gap","show","opt","setOptions","redrawLine","updateModelDims","removeLayerLines","animateLines","adv","redrawAllLines","removeAllLines","varGroup","newDims","decoderDims","dimType","slice","currentDims","getDims","getAttribute","setStateVal","pop","currentUnit","latentLayers","layerindex","eachLayer","_","unitindex","layergroup","buttonaction","updateUnits","encLayers","nodeunit","layerdiv","decLayers","updateLayerClick","HistogramChart","numTicks","xTicks","epoch","nice","bins","thresholds","ticks","binNorm","binsAnorm","join","x0","x1","text","toFixed","meanNormal","meanAbnormal","midPoint","Viz","modelChartWidth","innerWidth","modelChartHeight","testData","require","trainMse","apptitle","trainData","selectedIndex","selectedData","showDrawData","drawSectionWidth","drawSectionHeight","isLoading","modelLoaded","predictedMse","selectedLegend","showAutoEncoderViz","showMseViz","isDataTransormed","showBeforeTrainingHistogram","trainVizEpoch","bestMetric","minThreshold","maxThreshold","vizThresold","histPlaying","showError","errorMsg","currentEpoch","chartColorMap","0","colornorm","name","1","2","3","4","maxSmallChart","modelDataLastUpdated","hiddenDim","mseExplanations","smallChartxScale","smallChartyScale","offsetWidth","xMinArray","xMaxArray","featureRange","sampleTestData","myStringify","applyTransform","sampleTransformedTestData","computeAccuracyMetrics","componentLoadedTime","replayHistInterval","result","el","loadedModel","dispose","holder","setTimeout","tf","catch","then","model","getPrediction","transformedData","dataTensor","preds","predict","batchSize","square","mean","array","applyReverseTransform","loadModel","uniqueMse","rocMetricHolder","metric","threshVal","lastclicked","setSelectedData","index","toString","replayUpdater","dataLegend","Object","entries","clickLegend","background","dataLegendSmall","dataPoints","isVisible","indexvalue","clickDataPoint","targetval","datasetExamples","dataSketchPad","barColor","modelOutput","opacity","Loading","active","small","withOverlay","fontSize","setDatasetECG","setDatasetDraw","toggelTransform","textContent","toggleVizHistPlaying","Slider","minLabel","maxLabel","stepMuliplier","labelText","hideTextInput","onChange","updateTrainVizEpoch","disabled","updateThreshold","borderLeftColor","ROCChart","dotRadius","rocLine","rocArea","drawLines","auc","ScatterPlot","LossChart","innerHTML","loss","val_loss","trainLine","valLine","curve","Train","stepOptions","type","regularizerOptions","batchSizeOptions","learningRateOptions","trainingDataOptions","testDataOptions","optimizerOptions","abnormalPercentageOptions","selectedAbnormalPercentage","selectedTrainDataOption","selectedTestDataOption","selectedOptimizer","selectedRegularizer","trainMetricHolder","CumulativeSteps","interfaceTimedDelay","trainLoaded","testLoaded","trainDataShape","testDataShape","mseData","rocData","createdModel","encodedData","numFeatures","hiddenLayers","learningRate","regularizer","adamBeta1","optimizer","outputActivation","numSteps","numEpochs","trainMetrics","trainDataSize","testDataSize","modelStale","showModelComposer","showModelEvaluationMetrics","showRocChart","showLossChart","showMseHistogram","showBottleneckScatterPlot","validateOnStep","showAdvanced","showIntroduction","showWarmingUp","lossChartHeight","lossChartWidth","abnormalPercentage","floatCapable","floatEnabled","isCreating","showOptions","checked","currentSteps","xsTrain","xsTest","yTest","trainDataPath","testDataPath","momentum","modelWarmedUp","tensorsCreated","trainUnmounted","getChartContainerSizes","fetchData","error","handleDataLoadError","dataPath","fetch","response","json","generateDataTensors","destroyModelTensors","adam","adamax","adadelta","rmsprop","sgd","modelParams","regularizationRate","layerRegularizer","regularizers","l1","l2","l1l2","input","shape","encoderHidden","layers","dense","units","activation","kernelRegularizer","apply","z_","encoder","inputs","outputs","latentInput","decoderHidden","j","decoderOutput","output","ae","compile","buildModel","getPredictions","warmUpTensor","item","startTime","fit","epochs","verbose","elapsedTime","validationData","metricRow","history","traintime","trainModel","savedModel","loadTestData","sortBy","reverse","rocSum","prevMetric","mseDataHolder","element","getLayer","getOutputAt","encoderPredictions","encPredHolder","maxAbnormalCount","abnormalCount","trainEcg","row","val","createModel","selectedItem","offsetHeight","chartState","box","showCheckBoxes","Checkbox","defaultChecked","wrapperClassName","showOptionsClick","isDataLoaded","loadingText","trainResetButtons","resetModelButtonClick","trainButtonClick","configBar","Dropdown","items","initialSelectedItem","itemToString","updateModelParam","firstEncode","compBoxSize","modelComposerBlock","lossChartBlock","rocChartBlock","mseHistogramBlock","bottleneckScatterPlotBlock","modelMetricsBlock","toggleIntroDrawer","toggleAdvancedDrawer","Tooltip","direction","triggerText","createBrowserHistory","basename","forceRefresh","keyLength","getUserConfirmation","message","callback","confirm","listen","page","hash","pageview","linkHolder","updateLh","Main","component","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","URL","process","origin","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7a108461.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\nimport React, { Component } from \"react\";\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { LogoGithub16 } from '@carbon/icons-react';\n\nimport \"./header.css\"\n\nclass AppHeader extends Component {\n    constructor(props) {\n        super(props)\n\n        this.appName = \"Anomagram\"\n        this.appDescription = \"An interactive visualization for exploring deep learning models applied to the task of anomaly detection.\"\n\n\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"headermain\" aria-label={this.appDescription}>\n\n                    <div className=\"container-fluid w100 headerrow pl10 \">\n\n                        <div className=\"flex    h100\">\n                            <div className=\"h100   flex flexjustifycenter mr10 \">\n                                <a href={process.env.PUBLIC_URL + \"/#\"}>\n                                    <img className=\"headericon\" src=\"images/icon.png\" alt=\"anomagram logo\" />\n\n                                </a>\n                            </div>\n                            <div className=\"h100 apptitle  flex flexjustifycenter  mr10\">\n                                <div className=\"whitetext boldtext  iblock mr10\">  {this.appName} </div>\n                            </div>\n                            <div className=\"h100   flex flexjustifycenter  navbarlinks \">\n                                <NavLink exact to=\"/\"> Introduction </NavLink>\n                            </div>\n                            <div className=\"h100   flex flexjustifycenter  navbarlinks mr10\">\n                                <NavLink exact to=\"/train\"> Train <span className=\"apptitle\"> a Model </span></NavLink>\n                            </div>\n                            <div className=\"h100   flex flexjustifycenter   navbarlinks mr10\">\n                                <a className=\" dispalyblock h100  \" href=\"https://github.com/victordibia/anomagram/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                    <LogoGithub16 className=\" whitefill gitlogo  \"></LogoGithub16>\n                                    <span className=\"gitlogotext\">Git</span><span className=\" apptitle\">hub</span>\n                                </a>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n                <div></div>\n                <div className=\"headerboost\">  </div>\n            </div>\n\n        );\n    }\n}\n\nexport default AppHeader;\n","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\nimport React, { Component } from \"react\";\nimport \"./footer.css\"\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div style={{ zIndex: 999000 }}>\n                Made with <span className=\"redcolor\">&#9829;</span> at <a href=\"https://experiments.fastforwardlabs.com/\" target=\"blank\">Fast Forward Labs</a>.\n            </div>\n        );\n    }\n}\n\nexport default Footer;","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport React, { Component } from 'react'\n// import { loadJSONData, abbreviateString } from \"../helperfunctions/HelperFunctions\"\nimport \"./linechart.css\"\nimport * as d3 from \"d3\"\n\n\nclass LineChart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            data: this.props.data,\n            predictedData: this.props.predictedData,\n            color: this.props.color\n        }\n\n\n\n        this.minChartWidth = this.props.width\n        this.minChartHeight = this.props.height\n\n        // console.log(this.props);\n\n        this.backgrounOpacity = \"63\"\n\n\n    }\n\n    componentDidMount() {\n        // console.log(\"Line component mounted\")\n        this.drawGraph()\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(this.props.index, prevProps.index);\n\n        if (this.props.lastUpdated !== prevProps.lastUpdated) {\n            this.setState({ data: this.props.data })\n            // console.log(\"stuff hass changed\", this.props.data);\n            this.updateGraph(this.props.data, this.props.predictedData)\n\n        }\n\n    }\n\n    setupScalesAxes(data) {\n        this.chartMargin = { top: 10, right: 5, bottom: 25, left: 20 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n        // consolse.log(data);\n\n        var n = data.length / 2;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data), d3.max(data)]) // input \n            .range([this.chartHeight, 0]); // output \n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n    }\n\n    updateGraph(data, predictedData) {\n        let self = this\n        // console.log(data)\n        this.setupScalesAxes(data.concat(predictedData))\n        // Select the section we want to apply our changes to\n        var svg = d3.select(\"div.linechartbox\").transition();\n\n\n        let jointData = []\n        for (let i = 0; i < this.props.data.length; i++) {\n            jointData.push({ data: this.props.data[i], predictedData: this.props.predictedData[i] })\n        }\n\n        // Make the changes\n        svg.select(\".line\")   // change the input line\n            .duration(750)\n            .attr(\"stroke\", this.state.color)\n            .attr(\"d\", this.line(data));\n\n        // Make the changes to predicted line\n        svg.select(\".predictedline\")   // change the line\n            .duration(750)\n            .attr(\"stroke\", this.props.predictedColor)\n            .attr(\"d\", this.line(predictedData));\n\n        //make changes to the error area\n        svg.select(\".msearea\")\n            .duration(750)\n            .attr(\"fill\", this.props.predictedColor + this.backgrounOpacity)\n            .attr(\"stroke\", \"none\")\n            .attr(\"d\", this.msearea(jointData)\n            );\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            svg.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n        svg.select(\".y.axis\")\n            .call(customYAxis).duration(5);\n    }\n\n\n    drawGraph() {\n        let self = this\n        this.setupScalesAxes(this.state.data.concat(this.state.predictedData))\n        let width = this.chartWidth, height = this.chartHeight, margin = this.chartMargin\n\n        let jointData = []\n        for (let i = 0; i < this.props.data.length; i++) {\n            jointData.push({ data: this.props.data[i], predictedData: this.props.predictedData[i] })\n        }\n\n        // 7. d3's line generator\n        this.line = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d); }) // set the y values for the line generator \n        // .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.msearea = d3.area()\n            .x(function (d, i) { return self.xScale(i); })\n            .y0(function (d) { return self.yScale(Math.min(d.data, d.predictedData)) })\n            .y1(function (d) { return self.yScale(Math.max(d.data, d.predictedData)) })\n\n        // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n        var dataset = this.state.data\n\n        // console.log(this.state);\n\n\n        // d3.range(n).map(function (d) { return { \"y\": d3.randomUniform(1)() } })\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        // 1. Add the SVG to the page and employ #2\n        var svg = d3.select(\"div.linechartbox\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n        // 9. Append the path, bind the data, and call the line generator \n        svg.append(\"path\")\n            .datum(dataset) // 10. Binds data to the line \n            .attr(\"class\", \"line\") // Assign a class for styling \n            .attr(\"stroke\", this.state.color)\n            .attr(\"d\", this.line); // 11. Calls the line generator \n\n        svg.append(\"path\")\n            .datum(this.state.predictedData) // 10. Binds data to the line \n            .attr(\"class\", \"predictedline\") // Assign a class for styling \n            .attr(\"stroke\", this.props.predictedColor)\n            .attr(\"d\", this.line); // 11. Calls the line generator \n\n        svg.append(\"path\")\n            .datum(jointData)\n            .attr(\"class\", \"msearea\") // Assign a class for styling \n            .attr(\"fill\", this.props.predictedColor + this.backgrounOpacity)\n            .attr(\"stroke\", \"none\")\n            .attr(\"d\", this.msearea\n            )\n\n        // // 12. Appends a circle for each datapoint \n        // svg.selectAll(\".dot\")\n        //     .data(dataset)\n        //     .enter().append(\"circle\") // Uses the enter().append() method\n        //     .attr(\"class\", \"dot\") // Assign a class for styling\n        //     .attr(\"cx\", function (d, i) { return xScale(i) })\n        //     .attr(\"cy\", function (d) { return yScale(d) })\n        //     .attr(\"r\", 5)\n        //     .on(\"mouseover\", function (a, b, c) {\n        //         console.log(a)\n        //         // this.attr('class', 'focus')\n        //     })\n    }\n\n\n    render() {\n\n\n\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendbottomrightmod p5 mediumdesc \">\n                    <div className=\"mb3 \">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\"> Input  </div>\n                        <div className=\"iblock \"> </div>\n                    </div>\n                    <div className=\"mb3 \">\n                        <div style={{ backgroundColor: this.props.predictedColor }} className=\"legendcolorbox mr5 iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\"> Prediction</div>\n                        <div className=\"iblock \"></div>\n                    </div>\n                    <div >\n                        <div style={{ backgroundColor: this.props.predictedColor + this.backgrounOpacity }} className=\"legendcolorbox mr5  iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\"> Error  </div>\n                        <div className=\"iblock \"> </div>\n                    </div>\n                </div>\n\n                <div className=\"linechartbox \"></div>\n\n            </div>\n        )\n    }\n}\n\nexport default LineChart","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport React, { Component } from 'react'\nimport \"./linechart.css\"\n\nclass SmallLineChart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n\n        this.xScale = this.props.data.xScale\n        this.yScale = this.props.data.yScale\n    }\n\n    componentDidMount() {\n        let canvas = this.refs.smalllinecanvas\n        canvas.width = this.props.data.chartWidth\n        canvas.height = this.props.data.chartHeight\n        this.drawGraph()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n\n    }\n    drawGraph() {\n\n        let data = this.state.chart.data.data\n\n        let canvas = this.refs.smalllinecanvas,\n            context = canvas.getContext('2d')\n\n\n\n        context.translate(0, this.props.data.chartHeight);\n        context.scale(1, -1);\n\n        context.strokeStyle = this.state.chart.color;\n\n        var left = 0,\n            prev_stat = data[0],\n            move_left_by = this.props.data.chartWidth / data.length;\n\n        for (let stat in data) {\n\n            let the_stat = this.yScale(data[stat]);\n\n            context.beginPath();\n            context.moveTo(left, prev_stat);\n            context.lineTo(left + move_left_by, the_stat);\n            context.lineWidth = 1.6;\n            context.lineCap = 'round';\n\n            context.stroke();\n\n            prev_stat = the_stat;\n            left += move_left_by;\n\n        }\n    }\n\n    render() {\n\n        return (\n            <canvas ref=\"smalllinecanvas\" ></canvas>\n        )\n    }\n}\n\nexport default SmallLineChart","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\nimport React, { Component } from \"react\";\nimport \"./drawsignal.css\"\nimport * as d3 from \"d3\"\n// import * as _ from \"lodash\"\nimport { Button } from \"carbon-components-react\"\n\nclass DrawSignal extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            signalExtracted: false\n        }\n\n\n        this.axisOffset = 20\n        this.chartWidth = this.props.width - this.axisOffset\n        this.chartHeight = this.props.height\n\n\n        this.smallChartWidth = 150\n        this.smallChartHeight = 40\n\n        this.prevX = 0\n        this.currX = 0\n        this.prevY = 0\n        this.currY = 0\n        this.dot_flag = false;\n\n        this.strokeColor = \"black\"\n        this.lineWidth = 2\n        this.flag = false\n\n        this.drawMap = new Map()\n        this.signalCount = 140\n        this.pointColors = []\n\n        this.scaleRange = [2, -5]\n\n        // Add x and y axis labelss for drawsignal\n        this.yaxisList = [2, 1, 0, -1, -2, -3, -4]\n        this.xaxisList = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        // console.log(prevProps.data.epoch, this.props.data.epoch)\n        if ((this.props.width !== prevProps.width)) {\n            this.chartWidth = this.props.width - this.axisOffset\n            this.setUpCanvasSize()\n        }\n\n    }\n\n    componentDidMount() {\n\n\n        this.refs.drawsignaloutcanvas.width = this.smallChartWidth\n        this.refs.drawsignaloutcanvas.height = this.smallChartHeight\n        this.smallChartContext = this.refs.drawsignaloutcanvas.getContext('2d')\n\n        // console.log(\"Line component mounted\")\n        this.largeChartCanvas = this.refs.drawsignalcanvas\n        this.setUpCanvasSize()\n        this.largeChartContext = this.largeChartCanvas.getContext('2d')\n\n        this.largeChartCanvas.addEventListener(\"mousedown\", this.mouseDownEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"mouseup\", this.mouseUpEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"mousemove\", this.mouseMoveEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"mouseout\", this.mouseOutEvent.bind(this))\n\n        this.largeChartCanvas.addEventListener(\"touchend\", this.touchEndEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"touchstart\", this.touchStartEvent.bind(this), { passive: true })\n        this.largeChartCanvas.addEventListener(\"touchmove\", this.touchMoveEvent.bind(this), { passive: true })\n\n\n        // Set up scales \n        this.xScale = d3.scaleLinear()\n            .domain([0, this.signalCount - 1]) // input\n            .range([0, this.smallChartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([0, this.chartHeight]) // input \n            .range([0, this.smallChartHeight]); // output\n\n\n        this.ynScale = d3.scaleLinear()\n            .domain([0, this.chartHeight]) // input \n            .range(this.scaleRange); // output\n\n\n        this.zeroArr = new Array(this.signalCount).fill(0);\n\n    }\n\n    setUpCanvasSize() {\n        this.largeChartCanvas.width = this.chartWidth\n        this.largeChartCanvas.height = this.chartHeight;\n    }\n\n\n    draw() {\n\n\n        this.largeChartContext.beginPath();\n        this.largeChartContext.moveTo(this.prevX, this.prevY);\n        this.largeChartContext.lineTo(this.currX, this.currY);\n        this.largeChartContext.strokeStyle = this.strokeColor;\n        this.largeChartContext.lineWidth = this.lineWidth;\n        this.largeChartContext.stroke();\n        this.largeChartContext.closePath();\n        // console.log(this.currX, this.currY);\n\n        if (!this.drawMap.has(this.currX)) {\n            this.drawMap.set(this.currX, this.currY)\n\n        }\n\n    }\n\n\n\n    findxy(res, e) {\n        if (res === 'down') {\n            this.flag = true;\n            this.dot_flag = true;\n            if (this.dot_flag) {\n                this.largeChartContext.beginPath();\n                this.largeChartContext.fillStyle = this.strokeColor;\n                this.largeChartContext.fillRect(this.currX, this.currY, 2, 2);\n                this.largeChartContext.closePath();\n                this.dot_flag = false;\n            }\n        }\n        if (res === 'up') {\n            this.flag = false;\n            this.miniGraph()\n        }\n        if (res === \"out\") {\n            this.flag = false;\n        }\n        if (res === 'move') {\n\n        }\n    }\n\n    limitValues(x, min, max) {\n        x = x < min ? min : x\n        x = x > max ? max : x\n        return x\n    }\n\n    setXYCoords(xPos, yPos) {\n        // console.log(xPos, yPos);\n\n        xPos = this.limitValues(xPos, 0, this.chartWidth)\n        yPos = this.limitValues(yPos, 0, this.chartHeight)\n\n        this.prevX = this.currX;\n        this.prevY = this.currY;\n        this.currX = xPos\n        this.currY = yPos\n    }\n\n    updateMove(xPos, yPos) {\n        if (this.flag) {\n            this.setXYCoords(xPos, yPos)\n            this.draw();\n        }\n    }\n\n    touchStartEvent(e) {\n        console.log(e.changedTouches[0].pageY);\n        this.setXYCoords(e.changedTouches[0].pageX - this.largeChartCanvas.offsetLeft, e.changedTouches[0].pageY - this.largeChartCanvas.offsetTop)\n        this.findxy('down', e)\n    }\n\n    touchEndEvent(e) {\n        this.findxy('up', e)\n    }\n    touchMoveEvent(e) {\n        console.log(e.changedTouches.length);\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            console.log(\"touchpoint[\" + i + \"].pageX = \" + e.changedTouches[i].pageX);\n            console.log(\"touchpoint[\" + i + \"].pageY = \" + e.changedTouches[i].pageY);\n            this.updateMove(e.changedTouches[i].pageX - this.largeChartCanvas.offsetLeft, e.changedTouches[i].pageY - this.largeChartCanvas.offsetTop)\n        }\n    }\n\n\n    mouseDownEvent(e) {\n        this.setXYCoords(e.pageX - this.largeChartCanvas.offsetLeft, e.pageY - this.largeChartCanvas.offsetTop)\n        this.findxy('down', e)\n    }\n    mouseUpEvent(e) {\n        this.findxy('up', e)\n    }\n    mouseMoveEvent(e) {\n        this.updateMove(e.pageX - this.largeChartCanvas.offsetLeft, e.pageY - this.largeChartCanvas.offsetTop)\n    }\n    mouseOutEvent(e) {\n        this.findxy('out', e)\n    }\n\n\n\n    componentWillUnmount() {\n        this.largeChartCanvas.removeEventListener(\"mousedown\", this.mouseDownEvent)\n        this.largeChartCanvas.removeEventListener(\"mouseup\", this.mouseUpEvent)\n        this.largeChartCanvas.removeEventListener(\"mouseover\", this.mouseMoveEvent)\n        this.largeChartCanvas.removeEventListener(\"mouseout\", this.mouseOutEvent)\n\n\n        this.largeChartCanvas.removeEventListener(\"touchend\", this.touchEndEvent)\n        this.largeChartCanvas.removeEventListener(\"touchstart\", this.touchStartEvent)\n        this.largeChartCanvas.removeEventListener(\"touchmove\", this.touchMoveEvent)\n\n\n    }\n\n    miniGraph() {\n        if (this.drawMap.size > 0) {\n            this.drawGraph(this.drawMap)\n\n        }\n    }\n\n    clearDrawing() {\n\n        this.largeChartContext.clearRect(0, 0, this.chartWidth, this.chartHeight);\n        this.smallChartContext.clearRect(0, 0, this.smallChartWidth, this.smallChartHeight);\n\n        this.drawMap = new Map()\n        this.setState({ signalExtracted: false })\n\n        this.props.updateCurrentSignal(this.zeroArr)\n    }\n\n    rangeMean(i, start, end, prevMean, data) {\n        let sum = 0\n        let count = 0\n        for (let i = start; i <= end; i++) {\n            if (data.get(i * 1)) {\n                sum += data.get(i * 1)\n                count++\n            }\n        }\n\n        let rangeMean = sum / count\n        this.pointColors[i] = \"blue\"\n        if (count === 0) {\n            rangeMean = prevMean\n            this.pointColors[i] = \"orange\"\n        }\n\n        // console.log(start, end, sum, count, rangeMean);\n        return rangeMean\n    }\n    drawGraph(data) {\n\n        let canv = this.refs.drawsignaloutcanvas\n        let context = canv.getContext(\"2d\")\n\n        this.smallChartContext.clearRect(0, 0, this.chartWidth, this.chartWidth);\n\n        // context.translate(0, this.chartHeight);\n        // context.scale(1, -1);\n\n        let prevMean = data.values().next().value\n        let curMean = 0\n        let signalHolder = []\n        let signalHolderScaled = []\n\n        let step = (this.chartWidth / this.signalCount)\n        for (let i = 0; i < this.signalCount; i++) {\n            curMean = this.rangeMean(i, Math.floor(i * step), Math.floor(i * step + step), prevMean, data)\n            signalHolder[i] = curMean\n            signalHolderScaled[i] = this.ynScale(curMean)\n            prevMean = curMean\n        }\n        this.setState({ signalExtracted: true })\n        this.props.updateCurrentSignal(signalHolderScaled)\n\n\n        // console.log(signalHolder);\n        let prevX = 0, prevY = signalHolder[0]\n        let currX = 0, currY = 0\n        for (let i = 1; i < signalHolder.length; i++) {\n            currX = i\n            currY = signalHolder[i] || signalHolder[i - 1]\n            context.beginPath();\n            context.moveTo(this.xScale(prevX), this.yScale(prevY));\n            context.lineTo(this.xScale(currX), this.yScale(currY));\n            context.strokeStyle = this.pointColors[i]\n            context.lineWidth = this.lineWidth;\n            context.stroke();\n            context.closePath();\n            prevX = currX\n            prevY = currY\n\n        }\n    }\n\n    drawSample() {\n\n    }\n\n\n    render() {\n        console.log();\n\n        let xaxis = this.yaxisList.map((data) => {\n            return (\n                <div style={{ height: this.chartHeight / this.yaxisList.length }} key={\"axisbox\" + data} className=\"axiscell \">\n                    <div className=\"axiscelltext mediumdesc\">   {data}</div>\n                </div>\n            )\n        })\n\n        let yaxis = this.xaxisList.map((data) => {\n            return (\n                <div style={{ width: (this.props.width - this.axisOffset) / this.xaxisList.length }} key={\"xaxisbox\" + data} className=\"xaxiscell iblock \">\n                    <div className=\"xaxiscelltext mediumdesc\">   {data}</div>\n                </div>\n            )\n        })\n        return (\n            // <div style={{ width: this.chartWidth + 25 }} className=\"mt2 border p10\">\n            <div className=\" w100 \" >\n\n                <div className=\"mb10 flex\">\n                    <div className=\"pb10 flexfull  mediumdesc\">\n                        <div className=\"h100 pt5 lhmedium \">  Click and drag to draw a signal. Please draw within the box.</div>\n                    </div>\n\n                    <div className=\"iblock mr5\">\n                        <Button\n                            size={\"small\"}\n                            renderIcon={null}\n                            onClick={this.clearDrawing.bind(this)}\n                        > Clear Drawing </Button>\n                    </div >\n                    {/* <div className=\"iblock\">\n                            <Button\n                                size={\"field\"}\n                                renderIcon={null}\n                                onClick={this.drawSample.bind(this)}\n                            > Draw Sample </Button>\n                        </div> */}\n                </div>\n                <div>\n                    <div className=\" w100 flex\">\n                        <div className=\" axisbox mr5 iblock\">\n                            {xaxis}\n                        </div>\n                        <div className=\"flexfull  iblock\">\n\n                            <div className={\"unclickable positionabsolute  smallchartbox \" + (this.state.signalExtracted ? \" \" : \" displaynone\")} >\n                                <canvas className=\"smallchart\" ref=\"drawsignaloutcanvas\" id=\"smallsignalcanvas\"></canvas>\n                                <div className={\"smalldesc extractedsignal \" + (this.state.signalExtracted ? \" \" : \" displaynone\")}> Extracted signal </div>\n\n                            </div>\n                            <div style={{ height: this.chartHeight }} className=\"\">\n\n                                <canvas className=\"border iblock largechart\" ref=\"drawsignalcanvas\" id=\"drawsignalcanvas\"></canvas>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={{ width: this.props.width - this.axisOffset + 5 }} className=\"horizontalaxis  \">{yaxis}</div>\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DrawSignal","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport ReactGA from 'react-ga';\nReactGA.initialize(\"UA-131578973-2\")\n\nexport function registerGAEvent(componentName, eventCategory, eventAction, componentLoadTime) {\n    let eventTime = (new Date()).getTime() - componentLoadTime\n    if (window.location.hostname !== \"localhost\") {\n        // console.log(\"GA\", eventCategory, eventTime, eventAction, componentName)\n        ReactGA.event({\n            category: eventCategory,\n            action: eventAction,\n            value: eventTime,\n            label: componentName\n        });\n    }\n\n}\n\nexport function showToast(type, message, duration = 4000) {\n    let notifbox = document.getElementById(\"notificatiionbox\")\n    let notif = document.createElement('div');\n    notif.className = \"notificationinner\"\n    notif.innerHTML = \"\" + message\n    notifbox.append(notif)\n    notif.style.opacity = 1\n    // console.log(notifbox);\n\n    setTimeout(() => {\n        // notif.remove()\n        notif.style.opacity = 0\n        setTimeout(() => {\n            notif.remove()\n        }, 1500);\n    }, duration);\n\n}\n\nexport function computeAccuracyGivenThreshold(data, threshold) {\n\n    let predVal = 0\n    let truePositive = 0\n    let trueNegative = 0\n    let falsePositive = 0\n    let falseNegative = 0\n\n    data.forEach(each => {\n        predVal = each.mse > threshold ? 1 : 0\n        if ((each.label === 1) && (predVal === 1)) {\n            truePositive++\n        }\n        if ((each.label === 0) && (predVal === 0)) {\n            trueNegative++\n        }\n\n        if ((each.label === 0) && (predVal === 1)) {\n            falsePositive++\n        }\n\n        if ((each.label === 1) && (predVal === 0)) {\n            falseNegative++\n        }\n    });\n\n    let metricRow = {\n        acc: (truePositive + trueNegative) / data.length,\n        threshold: threshold,\n        tp: truePositive,\n        tn: trueNegative,\n        fp: falsePositive,\n        fn: falseNegative,\n        tpr: truePositive / (truePositive + falseNegative),\n        fpr: falsePositive / (trueNegative + falsePositive),\n        fnr: falseNegative / (truePositive + falseNegative),\n        tnr: trueNegative / (trueNegative + falsePositive),\n        precision: truePositive / (truePositive + falsePositive) || 0,\n        recall: truePositive / (truePositive + falseNegative)\n\n    }\n\n    return metricRow\n\n}\n\nexport function percentToRGB(percent) {\n    percent = 100 - percent\n    if (percent === 100) {\n        percent = 99\n    }\n    let r, g, b;\n\n    if (percent < 50) {\n        // green to yellow\n        r = Math.floor(255 * (percent / 50));\n        g = 255;\n\n    } else {\n        // yellow to red\n        r = 255;\n        g = Math.floor(255 * ((50 - percent % 50) / 50));\n    }\n    b = 0;\n\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n}\n\n\nexport function abbreviateString(value, maxLength) {\n    if (value.length <= maxLength) {\n        return value\n    } else {\n        let retval = value.substring(0, maxLength) + \" ..\"\n        return retval\n    }\n}\n\nexport function boundWidth(widthVal) {\n    if (widthVal < 0) {\n        return 0;\n    } else if (widthVal > 1) {\n        return 1;\n    } else {\n        return widthVal;\n    }\n}\n\nfunction intlFormat(num) {\n    return new Intl.NumberFormat().format(Math.round(num * 10) / 10);\n}\nexport function makeFriendly(num) {\n    if (num < 1 && num > 0) {\n        return num\n    }\n    if (Math.abs(num) >= 1000000)\n        return intlFormat(num / 1000000) + 'M';\n    if (Math.abs(num) >= 1000)\n        return intlFormat(num / 1000) + 'k';\n    return intlFormat(num);\n}\n\nexport function loadJSONData(url) {\n    return fetch(url)\n        .then(\n            function (response) {\n                if (response.status !== 200) {\n                    console.log('Looks like there was a problem. Status Code: ' + response.status);\n                    return;\n                }\n                // Examine the text in the response\n                //    response.text().then(function(data){\n                //        console.log(data)\n                //    })\n                return response.json().then(function (data) {\n                    return data\n                });\n            }\n        )\n        .catch(function (err) {\n            console.log('Fetch Error :-S', err);\n        });\n}\n\nexport function ColorArray() {\n    let colorArray = [\n        \"#1f78b4\",\n        \"#b2df8a\",\n        \"#33a02c\",\n        \"#fb9a99\",\n        \"#e31a1c\",\n        \"#fdbf6f\",\n        \"#ff7f00\",\n        \"#6a3d9a\",\n        \"#cab2d6\",\n        \"#ffff99\",\n        \"#8fff4f\"\n    ]\n    return colorArray\n}\n\n\nexport function ColorArrayRGB() {\n    let colorArray = [\n        [141, 211, 199],\n        [255, 255, 179],\n        [190, 186, 218],\n        [251, 128, 114],\n        [128, 177, 211],\n        [253, 180, 98],\n        [179, 222, 105],\n        [252, 205, 229],\n        [188, 128, 189],\n        [204, 235, 197],\n    ]\n    return colorArray\n}\n\nexport function checkInView(container, element, partial, containerOffset, elementOffset) {\n\n    if (container) {\n        //Get container properties\n        let cTop = container.scrollTop;\n        let cBottom = cTop + container.clientHeight + containerOffset;\n\n        //Get element properties\n        let eTop = element.offsetTop + elementOffset;\n        let eBottom = eTop + element.clientHeight;\n\n        //Check if in view    \n        let isTotal = (eTop >= cTop && eBottom <= cBottom);\n        let isPartial = partial && (\n            (eTop < cTop && eBottom > cTop) ||\n            (eBottom > cBottom && eTop < cBottom)\n        );\n\n        //Return outcome\n        // console.log(\"cT:\", cTop, \"conHei\", container.clientHeight, \" offset\", containerOffset, elementOffset, container.offsetTop)\n        // console.log(element.offsetTop, \"eT:\", eTop, \"cT:\", cTop, \"eB:\", eBottom, \"cB:\", cBottom, isTotal || isPartial)\n        return (isTotal || isPartial);\n    } else {\n        return false\n    }\n\n\n}\n\nexport const LeaderLine = window.LeaderLine;\nexport const animOptions = { duration: 800, timing: 'ease' }\nexport const greyColor = \"rgba(189, 195, 199, 0.5)\"\nexport const blueColor = 'rgba(0,98,255, 1)'\n","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\nimport React, { Component } from \"react\";\nimport { LeaderLine, animOptions } from \"../helperfunctions/HelperFunctions\"\nimport { Add16, Subtract16 } from '@carbon/icons-react';\nimport \"./composemodel.css\"\nimport * as _ from \"lodash\"\n\nclass ComposeModel extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hiddenDims: this.props.hiddenDims,\n            latentDim: this.props.latentDim,\n            maxLayers: 10,\n            minLayers: 1,\n            maxUnits: 9,\n            minUnits: 2,\n            defaultLayerDim: 3,\n            isTraining: this.props.isTraining,\n            lineWidth: 1.5,\n            latentLineWidth: 2.5,\n            animationDuration: 350\n        }\n\n        this.lineHolder = []\n\n        this.rightTopAnchor = { x: \"100%\", y: \"5%\" }\n        this.rightBottomAnchor = { x: \"100%\", y: \"95%\" }\n        this.leftTopAnchor = { x: 0, y: \"5%\" }\n        this.leftBottomAnchor = { x: \"0%\", y: \"95%\" }\n        this.rightMiddle = { x: \"100%\", y: \"50%\" }\n        this.leftMiddle = { x: \"0%\", y: \"50%\" }\n\n\n        this.blueColor = \"rgba(0, 0, 255, 0.89)\"\n        this.greyColor = \"grey\"\n\n        this.isUpdatable = this.props.isUpdatable\n    }\n    componentDidMount() {\n        this.drawAllLines();\n    }\n\n\n    getElement(network, attributeName, attributeValue) {\n        return document.querySelector(\"div.\" + network).querySelector(\"[\" + attributeName + \"=\" + attributeValue + \"]\")\n    }\n\n    addLayerLines(network, layer) {\n        if ((layer * 1) !== (this.state.hiddenDims.length - 1)) {\n            let startId = \"layerdiv\" + layer;\n            let endId = \"layerdiv\" + (layer * 1 + 1);\n            let startEl = this.getElement(network, \"layerdiv\", startId)\n            let endEl = this.getElement(network, \"layerdiv\", endId)\n            // console.log(startEl, endEl);\n            let params = { pathType: \"straight\", startId: startId, endId: endId, network: network }\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightTopAnchor : this.leftTopAnchor, network === \"encoder\" ? this.leftTopAnchor : this.rightTopAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightTopAnchor : this.leftTopAnchor, network === \"encoder\" ? this.leftBottomAnchor : this.rightBottomAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightBottomAnchor : this.leftBottomAnchor, network === \"encoder\" ? this.leftTopAnchor : this.rightTopAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightBottomAnchor : this.leftBottomAnchor, network === \"encoder\" ? this.leftBottomAnchor : this.rightBottomAnchor, params)\n        } else {\n            let startId = \"layerdiv\" + layer;\n            let startEl = this.getElement(network, \"layerdiv\", startId)\n            // let encoderDiv = document.getElementById(\"mainencoderdiv\")\n            let latentDiv = document.getElementById(\"latentdiv\")\n            // let decoderDiv = document.getElementById(\"maindecoderdiv\")\n\n            let params = { pathType: \"arc\", startId: startId, endId: \"latent\", network: network }\n            this.drawLeaderLine(startEl, latentDiv, network === \"encoder\" ? this.rightMiddle : this.leftMiddle, network === \"encoder\" ? this.leftMiddle : this.rightMiddle, params)\n\n        }\n    }\n    addEncDecLines(layer) {\n        this.addLayerLines(\"encoder\", layer)\n        this.addLayerLines(\"decoder\", layer)\n    }\n    drawAllLines() {\n        // Add connector lines for encoder decoder \n        for (const layer in this.state.hiddenDims) {\n            this.addEncDecLines(layer)\n\n        }\n    }\n\n\n    removeLayerLines(lineId) {\n\n        // Remove lines associated with a deleted layer\n        // Remove it from the DOM and also from the holder array  \n        let toRemove = new Map()\n        this.lineHolder.forEach(function (each, i) {\n            if (each.startId === lineId || each.endId === lineId) {\n                each.line.remove()\n                toRemove.set(i, \"dot\")\n            } else {\n                each.line.position()\n            }\n        })\n\n        // Remove lines queued up for deletion\n        let newHolder = []\n        this.lineHolder.forEach(function (each, i) {\n            if (toRemove.get(i) == null) {\n                newHolder.push(each)\n            }\n        });\n\n\n        // console.log(\"old\", this.lineHolder.length, newHolder.length);\n        this.lineHolder = newHolder\n    }\n\n\n    drawLeaderLine(startElement, endElement, startAnchor, endAnchor, params) {\n\n        let lineColor = this.state.isTraining ? \"grey\" : \"rgba(0, 0, 255, 0.89)\"\n        let lineWidth = this.state.lineWidth\n        let plugType = \"disc\"\n\n        let line = new LeaderLine(\n            LeaderLine.pointAnchor(startElement, startAnchor),\n            LeaderLine.pointAnchor(endElement, endAnchor), {\n            color: lineColor,\n            startPlug: plugType,\n            endPlug: plugType,\n            startPlugColor: lineColor,\n            path: params.pathType,\n            size: lineWidth,\n            hide: true,\n            // dash: { gap: 2, animation: params.endId === \"latent\" ? this.state.isTraining : false }\n            dash: { gap: 3 }\n        });\n        // document.querySelector('.leader-line').style.zIndex = -100\n        animOptions.duration = this.state.animationDuration\n        line.show(\"draw\", animOptions)\n        this.lineHolder.push({ line: line, startId: params.startId, endId: params.endId, network: params.network })\n    }\n\n\n    removeAllLines(line) {\n        this.lineHolder.forEach(function (each) {\n            each.line.remove()\n        })\n        this.lineHolder = []\n    }\n\n    redrawAllLines() {\n        this.lineHolder.forEach(function (each) {\n            each.line.position();\n        })\n    }\n\n\n    redrawLine(lineId) {\n        this.lineHolder.forEach(function (each) {\n            if (each.startId === lineId || each.endId === lineId) {\n                // each.line.color = \"red\"\n                each.line.hide(\"none\")\n                each.line.show(\"draw\", animOptions)\n                each.line.position();\n            } else {\n                each.line.position();\n            }\n        })\n    }\n\n    animateLines() {\n        // let self = this\n        let color = this.state.isTraining ? this.greyColor : this.blueColor\n        // console.log(self.props.isTraining);\n        let opt = {\n            color: color,\n            startPlugColor: color\n        }\n\n        this.lineHolder.forEach(function (each) {\n            each.line.setOptions(opt)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        // Handle addition of a new node/unit in a layer \n        for (const i in this.state.hiddenDims) {\n            if (this.state.hiddenDims[i] !== prevState.hiddenDims[i]) {\n                this.redrawLine(\"layerdiv\" + i)\n                this.props.updateModelDims(this.state.hiddenDims, this.state.latentDim)\n\n            }\n        }\n\n        // Handle layer addition or removal \n        if (this.state.hiddenDims.length > prevState.hiddenDims.length) {\n            this.removeLayerLines(\"latent\")\n            this.addEncDecLines(this.state.hiddenDims.length - 2)\n            this.addEncDecLines(this.state.hiddenDims.length - 1)\n        } else if (this.state.hiddenDims.length < prevState.hiddenDims.length) {\n            this.removeLayerLines(\"layerdiv\" + this.state.hiddenDims.length)\n            this.addEncDecLines(this.state.hiddenDims.length - 1)\n\n        }\n\n\n        if (prevState.isTraining !== this.props.isTraining) {\n            // console.log(\"training toggled\");\n            this.setState({ isTraining: this.props.isTraining })\n            this.animateLines()\n\n        }\n\n        // Update parent state once dims change\n        if (this.state.hiddenDims.length !== prevState.hiddenDims.length || this.state.latentDim[0] !== prevState.latentDim[0]) {\n            // console.log(\"latent or hidden changed\");\n\n            this.props.updateModelDims(this.state.hiddenDims, this.state.latentDim)\n        }\n\n\n        if (prevProps.adv !== this.props.adv) {\n            this.redrawAllLines();\n        }\n\n    }\n\n    componentWillUnmount() {\n        this.removeAllLines()\n    }\n\n\n\n    setStateVal(varGroup, newDims) {\n        if (varGroup + \"\" === \"encoder\") {\n            this.setState({ hiddenDims: newDims })\n        } else if (varGroup + \"\" === \"decoder\") {\n            this.setState({ decoderDims: newDims })\n        } else if (varGroup + \"\" === \"latent\") {\n            this.setState({ latentDim: newDims })\n        }\n    }\n\n    getDims(dimType) {\n        switch (dimType) {\n            case \"encoder\":\n                return this.state.hiddenDims.slice()\n            case \"decoder\":\n                return this.state.decoderDims.slice()\n            case \"latent\":\n                return this.state.latentDim.slice()\n            default:\n                break\n        }\n    }\n\n\n\n\n    updateLayerClick(e) {\n\n\n        let currentDims = this.getDims(e.target.getAttribute(\"layergroup\"));\n\n        if (e.target.getAttribute(\"buttonaction\") === \"add\") {\n\n            if (currentDims.length + 1 <= this.state.maxLayers) {\n                currentDims.push(this.state.defaultLayerDim)\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        } else {\n\n            if (currentDims.length - 1 >= this.state.minLayers) {\n                currentDims.pop()\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n        }\n    }\n\n\n    updateUnits(e) {\n\n        // Update state variables for dimension units\n        let currentDims = this.getDims(e.target.getAttribute(\"layergroup\"));\n        let currentUnit = currentDims[e.target.getAttribute(\"unitindex\") * 1]\n        // console.log(e.target.getAttribute(\"unitindex\"), currentUnit);\n        if (e.target.getAttribute(\"buttonaction\") === \"add\") {\n\n            if (currentUnit + 1 <= this.state.maxUnits) {\n                currentDims[e.target.getAttribute(\"unitindex\") * 1] = currentUnit + 1\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        } else {\n\n            if (currentUnit - 1 >= this.state.minUnits) {\n                currentDims[e.target.getAttribute(\"unitindex\") * 1] = currentUnit - 1\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        }\n    }\n\n    nodeHover(e) {\n        console.log(e.target.getAttribute(\"nodeunit\"));\n\n    }\n\n\n    render() {\n\n        let latentLayers = this.state.latentDim.map((data, layerindex) => {\n            let eachLayer = _.range(data).map((unitindex) => {\n                return (\n                    <div className={\"eachunitbox \" + (this.state.isTraining ? \" unitgrey\" : \" unitblue\")} key={\"eachunit\" + unitindex}>\n                        {/* {index} */}\n                    </div>\n                )\n            })\n            return (\n                <div key={\"latentlayer\" + layerindex} className=\" h100 flex flexfull flexjustifycenter \">\n                    <div className=\" mwc flex flexjustifycenter mb5 mt5 \">\n                        <div className=\"\" >\n                            <div className=\"smalldesc mb3 unselectable latentunittitle\">{data} units</div>\n                            <div\n                                layergroup=\"latent\"\n                                unitindex={layerindex}\n                                buttonaction=\"add\"\n                                onClick={this.updateUnits.bind(this)}\n                                className={\"updatebutton unselectable mb3 clickable \" + ((data === this.state.maxUnits || !this.isUpdatable) ? \" disabled unclickable \" : \"\")}>\n                                <Add16 className=\"unclickable\"></Add16>\n                            </div>\n                            <div id=\"latentdiv\" className=\"layerdiv  pt3 mb3\">{eachLayer}</div>\n                            <div\n                                layergroup=\"latent\"\n                                unitindex={layerindex}\n                                buttonaction=\"subtract\"\n                                onClick={this.updateUnits.bind(this)}\n                                className={\"updatebutton unselectable  clickable \" + ((data === this.state.minUnits || !this.isUpdatable) ? \" disabled unclickable \" : \"\")}>\n                                <Subtract16 className=\"unclickable\"></Subtract16>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            )\n        })\n\n        let encLayers = this.state.hiddenDims.map((data, layerindex) => {\n\n            let eachLayer = _.range(data).map((unitindex) => {\n                // console.log(\"layerunit\" + layerindex + unitindex)\n                return (\n                    <div nodeunit={\"layerunit\" + layerindex + unitindex} ref={\"layerunit\" + layerindex + unitindex} className={\"eachunitbox \" + (this.state.isTraining ? \" unitgrey\" : \" unitblue\")} key={\"eachunit\" + unitindex}></div>\n                )\n            })\n            return (\n                <div key={\"enclayer\" + layerindex} className=\"iblock encdecbox  mr10 flex flexfull flexjustifycenter \">\n                    <div className=\"iblock    mb5 mt5\">\n                        <div className=\"smalldesc mb3 unselectable \">{data} units</div>\n                        <div\n                            layergroup=\"encoder\"\n                            unitindex={layerindex}\n                            buttonaction=\"add\"\n                            onClick={this.updateUnits.bind(this)}\n                            className={\"updatebutton unselectable mb3 clickable \" + ((data === this.state.maxUnits || !this.isUpdatable) ? \" disabled unclickable \" : \"\")}>\n                            <Add16 className=\"unclickable\"> </Add16>\n                        </div>\n                        <div layerdiv={\"layerdiv\" + layerindex} className=\"layerdiv  pt3 mb3\">{eachLayer}</div>\n                        <div\n                            layergroup=\"encoder\"\n                            unitindex={layerindex}\n                            buttonaction=\"subtract\"\n                            onClick={this.updateUnits.bind(this)}\n                            className={\"updatebutton unselectable mb3 clickable \" + ((data === this.state.minUnits || !this.isUpdatable) ? \" disabled unclickable \" : \"\")}>\n                            <Subtract16 className=\"unclickable\"></Subtract16>\n                        </div>\n\n\n                    </div>\n                </div >\n            )\n        })\n\n        // console.log(encLayers.length);\n        let decLayers = _.reverse(_.clone(encLayers));\n\n        return (\n            <div className=\"mb10 \">\n\n                {/* Layer controls */}\n\n                <div className=\"flex w100 mb5 \">\n                    {/* <div className=\"mediumdesc mb5 mt5 mr10\"> * we map the same configuration for both encoder and decoder </div> */}\n                    <div className=\"flex5 \">\n                        <div className=\"smalldesc networktitle  p5\"> Encoder {this.state.hiddenDims.length} Layers </div>\n                    </div>\n                    {this.props.isUpdatable && <div className=\"buttonbar mr10 ml10 \">\n                        <div\n                            layergroup=\"encoder\"\n                            buttonaction=\"add\"\n                            onClick={this.updateLayerClick.bind(this)}\n                            className={\"updatebutton unselectable mr5 clickable \" + (this.state.hiddenDims.length === this.state.maxLayers || !this.isUpdatable ? \" disabled unclickable \" : \"\")}>\n                            <Add16 className=\"unclickable\"></Add16>\n                        </div>\n                        <div\n                            layergroup=\"encoder\"\n                            buttonaction=\"subtract\"\n                            onClick={this.updateLayerClick.bind(this)}\n                            className={\"updatebutton unselectable  clickable \" + (this.state.hiddenDims.length === this.state.minLayers || !this.isUpdatable ? \" disabled unclickable \" : \"\")}>\n                            <Subtract16 className=\"unclickable\"></Subtract16>\n                        </div>\n                    </div>}\n                    {!this.props.isUpdatable && <div> z </div>}\n                    <div className=\"unselectable flex5     \">\n                        <div className=\"flex p5 networktitle  mediumdesc \">\n                            <div className=\"flex flexjustifyleft \"> </div>\n                            <div className=\"flex flexfull flexjustifycenter   \"></div>\n                            <div className=\"smalldesc\"> Decoder {this.state.hiddenDims.length} Layers </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Section titles */}\n                <div className=\"flex mb10 displaynone\">\n                    <div className=\"flex4 textaligncenter mediumdesc boldtext\"> Encoder </div>\n                    <div className=\"flex2 textaligncenter  mediumdesc boldtext\"> Bottleneck </div>\n                    <div className=\"flex4 textaligncenter  mediumdesc boldtext\"> Decoder </div>\n                </div>\n                {/* Encoder, bottleneck, Decoder  */}\n                <div className=\"flex\">\n                    <div className=\"iotextdata unselectable mr10 p5  \">\n                        input <span className=\"smalldesc\">[140 units]</span>\n                    </div>\n                    <div id=\"mainencoderdiv\" ref=\"encoderbox\" className=\"encoder greyhighlight  pl5 flex5 mr10 \">\n                        <div className=\"layerbar flex  flexjustifycenter pb10 pt10\">\n                            {encLayers}\n                        </div>\n\n                    </div>\n                    <div ref=\"latentbox\" className=\"bottlneck pr5 pl5   mr10 \">\n                        <div className=\"layerbar  h100  flex  flexjustifycenter  \">\n                            {latentLayers}\n                        </div>\n                    </div>\n                    <div id=\"maindecoderdiv\" ref=\"decoderbox\" className=\"decoder greyhighlight  pl5 flex5 \">\n                        <div className=\"layerbar flex   flexjustifycenter  pb10 pt10\">\n                            {decLayers}\n                        </div>\n                    </div>\n\n                    <div className=\"iotextdata unselectable ml10 p5  \">\n                        output <span className=\"smalldesc\">[140 units]</span>\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default ComposeModel;","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\nimport React, { Component } from \"react\";\nimport \"./histogram.css\"\nimport * as d3 from \"d3\"\n\nclass HistogramChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.xTicks = 7\n    }\n\n    componentDidMount() {\n\n        this.drawGraph(this.props.data.data)\n        // console.log(this.props.data); \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(prevProps.data.epoch, this.props.data.epoch)\n        if ((prevProps.data.epoch !== this.props.data.epoch) || (this.props.data.epoch + \"\" === \"0\" || this.props.data.threshold !== prevProps.data.threshold)) {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n        }\n\n    }\n\n\n    setupScalesAxes(data) {\n        // console.log(this.minChartWidth);\n\n        let self = this\n\n        this.chartMargin = { top: 10, right: 5, bottom: 55, left: 45 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n\n        this.xScale = d3.scaleLinear()\n            .domain(d3.extent(data, function (d) { return d.mse })).nice()\n            .range([this.chartMargin.left, this.chartWidth - this.chartMargin.right])\n\n        // All Bins\n        this.bins = d3.histogram()\n            .value(function (d) { return d.mse })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // Normal Bins\n        this.binNorm = d3.histogram()\n            .value(function (d) {\n                if (d.label + \"\" === \"0\") {\n                    return d.mse\n                };\n            })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // Abnormal Bins\n        this.binsAnorm = d3.histogram()\n            .value(function (d) {\n                if (d.label + \"\" === \"1\") {\n                    return d.mse\n                };\n            })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // this.xScale = d3.scaleLinear()\n        //     .domain([0, n - 1]) // input\n        //     .range([0, this.chartWidth]); // output\n\n        this.yScale = d3.scaleLinear()\n            .domain([0, d3.max(self.bins, d => d.length)]).nice()\n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale).ticks(this.xTicks)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data[0]);\n\n\n\n\n        this.setupScalesAxes(data)\n\n        let svg = d3.select(\"div.histogramchart\") //.transition();\n        // console.log(svg);\n\n        // // Abnormal Bins\n        svg.select(\".normcolor\")\n            .selectAll(\"rect\")\n            .data(self.binNorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length))\n        // .transition();\n\n        svg.select(\".anormcolor\")\n            .selectAll(\"rect\")\n            .data(self.binsAnorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length))\n\n        // Remove previous threshold line\n        // d3.select(\".thresholdline\").transition().duration(5500).style(\"opacity\", 0).remove()\n        // let thresholdVal = this.getThreshold(data)\n        svg.select(\".thresholdline\")\n            .attr(\"x1\", this.xScale(this.props.data.threshold))\n            .attr(\"x2\", this.xScale(this.props.data.threshold))\n\n        svg.select(\".thresholdtext\")\n            .attr(\"x\", this.xScale(this.props.data.threshold))\n            .text(\"Threshold - \" + this.props.data.threshold.toFixed(3));\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n\n    }\n\n    getThreshold(data) {\n\n        let meanNormal = d3.mean(data, function (d) {\n            if (d.label + \"\" === \"0\") {\n                return d.mse\n            };\n        })\n\n        let meanAbnormal = d3.mean(data, function (d) {\n            if (d.label + \"\" === \"1\") {\n                return d.mse\n            };\n        })\n\n        let midPoint = (meanNormal + meanAbnormal) / 2\n        let walkBackPercentage = 0.2\n        let thresholdVal = Math.min(meanNormal, meanAbnormal) + (midPoint - Math.min(meanNormal, meanAbnormal)) * walkBackPercentage\n\n\n        return thresholdVal\n    }\n\n    drawGraph(data) {\n        let self = this\n        this.setupScalesAxes(data)\n        // console.log(data[0]);\n\n        const svg = d3.select(\"div.histogramchart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n\n\n        // normal histogram\n        svg.append(\"g\")\n            .attr(\"class\", \"normcolor\")\n            .selectAll(\"rect\")\n            .data(self.binNorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length));\n\n        // Abnormal histogram\n        svg.append(\"g\")\n            .attr(\"class\", \"anormcolor\")\n            .selectAll(\"rect\")\n            .data(self.binsAnorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length));\n\n        //add threshold line\n        // let thresholdVal = this.getThreshold(data)\n\n        // threshold line\n        svg.append(\"line\")\n            .attr(\"class\", \"thresholdline\")\n            .attr(\"x1\", this.xScale(this.props.data.threshold))  //<<== change your code here\n            .attr(\"y1\", this.yScale(0))\n            .attr(\"x2\", this.xScale(this.props.data.threshold))  //<<== and here\n            .attr(\"y2\", this.yScale(this.yScale.domain()[1]))\n        // threshold label\n        svg.append(\"text\")\n            .attr(\"class\", \"thresholdtext\")\n            .attr(\"x\", this.xScale(this.props.data.threshold))\n            .attr(\"y\", this.yScale(this.yScale.domain()[1]))\n            .attr(\"dy\", \".95em\")\n            .attr(\"dx\", \".35em\")\n            .text(\"Threshold - \" + this.props.data.threshold.toFixed(3));\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"Mean Squared Error\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"Frequency\");\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n\n    render() {\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendtopleft p5 mediumdesc\">\n                    <div className=\"mb3\"> <div className=\"legendcolorbox mr5  themeblue iblock\"></div> Normal </div>\n                    <div> <div className=\"legendcolorbox mr5 themeorange iblock\"></div> Abnormal </div>\n                </div>\n\n                <div className=\"histogramchart chartsvg\"></div>\n            </div>\n        );\n    }\n}\n\nexport default HistogramChart;","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\n //Todo : discussiion on why autoencoders (non-linear, unknown unknowns).\n\nimport React, { Component } from 'react'\nimport { Loading, Button, Slider } from 'carbon-components-react'; \nimport {StopFilledAlt16, PlayFilledAlt16} from '@carbon/icons-react';\nimport \"./viz.css\"\nimport LineChart from \"../linechart/LineChart\"\nimport SmallLineChart from \"../linechart/SmallLineChart\"\nimport DrawSignal from \"../drawsignal/DrawSignal\"\nimport ComposeModel from \"../composemodel/ComposeModel\"\nimport HistogramChart from \"../histogram/HistogramChart\"\nimport {registerGAEvent, computeAccuracyGivenThreshold, percentToRGB } from \"../helperfunctions/HelperFunctions\" \nimport * as _ from \"lodash\"\nimport * as tf from '@tensorflow/tfjs';\nimport * as d3 from \"d3\"\n\n \nclass Viz extends Component {\n    constructor(props) {\n        super(props)\n\n        this.modelChartWidth = Math.min(390, window.innerWidth - 25)\n        this.modelChartHeight = 270\n\n        // Allow the draw signal component update current signal with drawn signal\n        this.updateCurrentSignal = this.updateCurrentSignal.bind(this)\n \n\n        // Define the composition and amount of test data shown\n        this.testData = require(\"../../data/ecg/test_small.json\") \n        // let maxTestData = 50\n        // this.testData = this.subsetTestData(testData, maxTestData)\n        \n        // console.log(this.testData);\n        \n        \n        this.zeroArr = new Array(this.testData[0].data.length).fill(0);\n        this.trainMse = {\"threshold\":[0]}\n\n        //set state\n        this.state = {\n            apptitle: \"Anomagram\",\n            trainData: [],\n            selectedIndex: 0,\n            selectedData: this.testData[0].data,\n            showDrawData: false,\n            drawSectionWidth: 350,\n            drawSectionHeight: this.modelChartHeight ,\n            isLoading: false,\n            modelLoaded: false,\n            threshold: 0.0075,\n            predictedData: this.zeroArr,\n            predictedMse: 0,\n            selectedLegend: \"All\",\n            showAutoEncoderViz: true,\n            showMseViz:true,\n            isDataTransormed: false,\n            showBeforeTrainingHistogram: false,\n            trainVizEpoch: 0,\n            bestMetric: { acc: 0, fpr: 0, fnr: 0, tnr: 0, tpr: 0, threshold: 0, precision: 0, recall: 0 },\n            minThreshold: 0,\n            maxThreshold: 1,\n            vizThresold: this.trainMse[\"threshold\"][0],\n            histPlaying: false,\n            showError: false,\n            errorMsg: \"An error has occured.\"\n        }\n\n        this.currentEpoch = 0\n        // Hashmap storing test data legend metadata\n        this.chartColorMap = {\n            0: { color: \"white\", colornorm: \"grey\", name: \"All\" },\n            1: { color: \"#0062ff\", colornorm: \"#0062ff\", name: \"Normal\" },\n            2: { color: \"orange\", colornorm: \"grey\", name: \"R-on-T Premature Ventricular Contraction\" },\n            3: { color: \"violet\", colornorm: \"grey\", name: \"Ectopic Beat\" },\n            4: { color: \"indigo\", colornorm: \"grey\", name: \"Premature Ventricular Contraction\" },\n            // 5: { color: \"red\", colornorm: \"grey\", name: \"Unclassifiable Beat\" },\n        }\n\n        this.maxSmallChart = 100\n        this.modelDataLastUpdated = true\n\n\n        this.hiddenDim = [7, 3]\n        this.latentDim = [2]\n\n       \n\n        this.mseExplanations = {}\n        this.mseExplanations[\"0\"] = \"Model is untrained, both normal and abnormal data have similar value range and overlapping distributions.\"\n        this.mseExplanations[\"2\"] = \"Model is untrained, both normal and abnormal data have similar value range and overlapping distributions.\"\n        this.mseExplanations[\"5\"] = \"Model is getting better at reconstructing normal data resulting in smaller MSE for normal data points.\"\n        this.mseExplanations[\"25\"] = \"Both distributions are now separate. We can set a clear threshold that separates normal from abnormal data.\"\n        \n\n        this.smallChartHeight = 30\n        this.smallChartWidth = 80\n\n        this.smallChartxScale = d3.scaleLinear()\n            .domain([0, this.testData[0].data.length - 1]) // input\n            .range([0, this.smallChartWidth]); // output\n\n\n        this.smallChartyScale = d3.scaleLinear()\n            .domain([d3.min(this.testData[0].data), d3.max(this.testData[0].data)]) // input \n            .range([0, this.smallChartHeight]); // output\n         \n    }\n\n\n    \n\n    componentDidUpdate(prevProps, prevState) {\n\n\n    }\n\n\n    componentDidMount() { \n\n        this.setState({ drawSectionWidth: this.refs[\"datasection\"].offsetWidth - 5 })\n        this.drawSectionWidth = this.refs[\"datasection\"].offsetWidth -5 \n\n        // Load minmax data transformation parameters\n        this.xMinArray = require(\"../../data/ecg/transform/xmin.json\")\n        this.xMaxArray = require(\"../../data/ecg/transform/xmax.json\")\n        this.featureRange = require(\"../../data/ecg/transform/range.json\")\n        \n        this.sampleTestData = this.myStringify(this.applyTransform(this.testData[0].data.slice(0,50)))\n        this.sampleTransformedTestData = this.myStringify(this.testData[0].data.slice(0, 50)) \n        \n        \n        this.trainMse = require(\"../../data/viz/mse.json\")\n        this.setState({vizThresold:this.trainMse[\"threshold\"][0]})\n        this.computeAccuracyMetrics(this.trainMse[\"mse\"][49]) \n         \n        this.componentLoadedTime = (new Date()).getTime()\n\n        this.replayHistInterval = 200\n    }\n\n    myStringify(data) {\n        let result = \"\"\n        data.forEach(el => {\n            result += \" \" + el.toFixed(2) + \",  \"; \n        });\n        return result\n    }\n\n    componentWillUnmount() {\n        // window.removeEventListener(\"resize\", this.onWindowResize)\n        if (this.loadedModel) {\n            this.loadedModel.dispose()\n        }\n    }\n\n    applyTransform(data) {\n        let holder = []\n        for (let i = 0; i < data.length; i++) {\n            holder[i] = ((data[i] - this.xMinArray[i]) / (this.xMaxArray[i] - this.xMinArray[i])) * (this.featureRange[\"max\"] - this.featureRange[\"min\"]) + this.featureRange[\"min\"]\n        }\n        return holder\n    }\n\n    applyReverseTransform(data) {\n        let holder = []\n        for (let i = 0; i < data.length; i++) {\n            holder[i] = ((data[i] - this.featureRange[\"min\"]) / (this.featureRange[\"max\"] - this.featureRange[\"min\"])) * (this.xMaxArray[i] - this.xMinArray[i]) + this.xMinArray[i]\n        }\n        return holder\n    }\n\n\n\n\n    loadModel() {\n        this.setState({ isLoading: true }) \n        setTimeout(() => {\n            let modelPath = process.env.PUBLIC_URL + \"/webmodel/ecg/model.json\"\n            tf.loadLayersModel(modelPath)\n                .catch(() => {\n                    console.log(\"Failed to loadmodel\");\n                    this.setState({showError:true, errorMsg: \"Error fetching model. Please check internet connection and reload page.\"}) \n                })\n                .then((model) => {\n                if (model) {\n                    this.loadedModel = model\n                    this.setState({ modelLoaded: true, isLoading: false, showError: false })\n                    this.getPrediction(this.state.selectedData)\n                } else {\n                   \n                }\n               \n            });\n        }, 700);\n    }\n\n\n    // Get predictions for a selected data point\n    getPrediction(data) {\n\n        if (!this.state.modelLoaded) {\n            this.setState({ selectedData: data })\n            this.loadModel()\n        } else {\n            this.setState({ isLoading: true })\n\n            let transformedData = this.applyTransform(data) \n\n            // Get predictions  \n            const [mse, preds] = tf.tidy(() => {\n                let dataTensor = tf.tensor2d(transformedData, [1, 140])\n                let preds = this.loadedModel.predict(dataTensor, { batchSize: 8 })\n                return [tf.sub(preds, dataTensor).square().mean(1), preds]\n            })\n\n            mse.array().then(array => { \n                this.setState({ isLoading: false, predictedMse: array[0] })\n            });\n\n            preds.array().then(array => {\n                this.modelDataLastUpdated = !this.modelDataLastUpdated\n                this.setState({ selectedData: data, predictedData: this.applyReverseTransform(array[0]) }, () => {\n\n                })\n            });\n\n            mse.dispose()\n            preds.dispose()\n        }\n\n\n\n    }\n\n    computeAccuracyMetrics(data) { \n        let uniqueMse = _.uniq(_.map(data, 'mse'))   \n\n        let rocMetricHolder = [] \n\n        uniqueMse.forEach((each, i) => {\n            let metric = computeAccuracyGivenThreshold(data, each) \n            rocMetricHolder.push(metric)  \n        }); \n \n\n        let bestMetric = _.maxBy(rocMetricHolder, \"acc\")  \n        this.setState({ bestMetric: bestMetric })\n        this.setState({ minThreshold: _.min(uniqueMse) })\n        this.setState({ maxThreshold: _.max(uniqueMse) }) \n        \n    }\n\n    updateThreshold(e) { \n            let threshVal = this.state.minThreshold + (e.value / 100) * (this.state.maxThreshold - this.state.minThreshold)\n            let bestMetric = computeAccuracyGivenThreshold(this.trainMse[\"mse\"][49] , threshVal)\n             \n        this.setState({ bestMetric: bestMetric }) \n        this.setState({ vizThresold: threshVal })\n        \n        if (this.state.trainVizEpoch !== 49) {\n\n            this.setState({ trainVizEpoch: 49 , histPlaying:false})\n            \n        }\n\n    }\n\n\n\n    updateCurrentSignal(data) {\n        this.getPrediction(data)\n    }\n\n\n    clickDataPoint(e) {\n\n        registerGAEvent(\"introduction\", \"ecgdatapointclick\",  e.target.getAttribute(\"indexvalue\"), this.componentLoadedTime)\n        \n        this.lastclicked = \"model\"\n        let selectedData = this.testData[e.target.getAttribute(\"indexvalue\")].data\n        // set data and get predictions on click \n        this.setSelectedData(e.target.getAttribute(\"indexvalue\"), selectedData)\n\n    }\n\n    setSelectedData(index, data) {\n\n        this.setState({ selectedIndex: index }, () => {\n            this.getPrediction(data)\n        })\n    }\n\n      \n    setDatasetDraw(e) {\n        this.setState({ showDrawData: true })\n        this.setState({ drawSectionWidth: Math.max(this.refs[\"datasetexamplebox\"].offsetWidth -5 , 350)})\n        // console.log(this.refs[\"datasetexamplebox\"].offsetWidth); \n        registerGAEvent(\"introduction\", \"showdraw\",  \"showdraw\", this.componentLoadedTime)\n        \n    }\n    setDatasetECG(e) {\n        this.setState({ showDrawData: false })\n        registerGAEvent(\"introduction\", \"showdataset\",  \"showdataset\", this.componentLoadedTime)\n        // this.setSelectedData(0, this.testData[0].data) \n    }\n\n    clickLegend(e) { \n        this.setState({ selectedLegend: e.target.getAttribute(\"action\") })\n    }\n\n    toggelTransform(e) {\n        this.setState({ isDataTransormed: !this.state.isDataTransormed })\n        registerGAEvent(\"introduction\", \"transformdata\",  !this.state.isDataTransormed.toString(), this.componentLoadedTime)\n    }\n \n\n    updateTrainVizEpoch(e) {\n        this.setState({ trainVizEpoch: e.value, vizThresold: this.trainMse[\"threshold\"][e.value] })\n    }\n\n    replayUpdater() {\n        setTimeout(() => {\n            // this.currentEpoch  =  (this.currentEpoch + 1) % 49\n            // console.log(this.state.trainVizEpoch);\n            \n            if (this.state.histPlaying && this.state.trainVizEpoch < 49) {\n                this.setState({ trainVizEpoch: this.state.trainVizEpoch +1 , vizThresold: this.trainMse[\"threshold\"][this.state.trainVizEpoch +1]   })\n                this.replayUpdater()\n            } else {\n                this.setState({ histPlaying:false  })\n            }\n        }, this.replayHistInterval);\n    }\n\n    toggleVizHistPlaying(e) {\n        if (!this.state.histPlaying) {\n            this.setState({trainVizEpoch:0}, () =>{\n                this.replayUpdater()\n            })\n           \n        }\n        this.setState({ histPlaying: !this.state.histPlaying })\n        registerGAEvent(\"introduction\", \"playtrainingviz\",  this.state.histPlaying, this.componentLoadedTime)\n \n    }\n\n    render() {\n\n\n        let dataLegend = Object.entries(this.chartColorMap).map((data, index) => {\n            let color = data[1].color\n            let name = data[1].name\n            // console.log(name); \n            return (\n                <div action={name} onClick={this.clickLegend.bind(this)} className={\"iblock mr5 mb5 unselectable legendrow clickable\" + (this.state.selectedLegend === name ? \" active\" : \" \")} key={\"legendrow\" + index}>\n                    <div style={{ background: color }} className=\"unclickable indicatorcircle iblock mr5\"></div>\n                    <div className=\"iblock unclickable legendtext pl4 mediumdesc\"> {name}</div> \n                </div>\n            )\n        });\n\n        let dataLegendSmall = Object.entries(this.chartColorMap).map((data, index) => {\n            let color = data[1].color\n            let name =  data[1].name\n            // console.log(name); \n            return (\n                <div action={name}  className={\"iblock mr5  unselectable \" + (data[1].name === \"All\" || data[1].name === \"Normal\"  ? \" displaynone\" : \"\") } key={\"legendsmallrow\" + index}>\n                    <div style={{ background: color }} className=\"unclickable indicatorcircle iblock mr5\"></div>\n                    <div className=\"iblock unclickable legendtext mediumdesc\"> {name}</div> \n                </div>\n            )\n        });\n\n        let dataPoints = this.testData.slice(0, this.maxSmallChart)\n            .map((data, index) => {  \n                let isVisible = (this.state.selectedLegend === this.chartColorMap[this.testData[index].target].name) || this.state.selectedLegend === \"All\"\n                return (\n                    <div  indexvalue={index} onClick={this.clickDataPoint.bind(this)} key={\"testrow\" + index} className={\"mb5 p5 clickable  ecgdatapoint rad3 iblock mr5\" + (isVisible ? \" \" : \" displaynone \") + (this.state.selectedIndex + \"\" === index + \"\" ? \" active \" : \"\")}  targetval={data.target} >\n                        {/* <div  className=\"boldtext  unclickable iblock \"> */}\n                            <div  indexvalue={index}  className=\"unclickable positionrelative\">\n                                <div className=\"p3 indicatoroutrcircle  positionabsolute bottomright\">\n                                    <div style={{ background: this.chartColorMap[this.testData[index].target].color }} className=\"indicatorcircle \"></div>\n                                </div>\n                                <SmallLineChart\n                                    data={{\n                                        data: this.testData[index],\n                                        index: index,\n                                        color: this.chartColorMap[this.testData[index].target].colornorm,\n                                        chartWidth: this.smallChartWidth,\n                                        chartHeight: this.smallChartHeight,\n                                        xScale: this.smallChartxScale,\n                                        yScale: this.smallChartyScale\n                                    }}\n                                > </SmallLineChart>\n                            </div> \n                        {/* </div>  */}\n                    </div>\n                ) \n        });\n\n        let datasetExamples = (\n            <div className=\"flex\">\n                <div className=\"flex20 mr10\">\n                    <div className=\"mb5\">\n                        {dataLegend}\n                    </div>\n                    <div className=\"ecgdatabox scrollwindow\">\n                        {dataPoints}\n                    </div>\n                </div>\n                <div className=\"p10 greyhighlight displaynone\">\n                    Threshold ring implementation\n                </div>\n            </div>\n        )\n\n        let dataSketchPad = (\n            <div >\n                <DrawSignal\n                    width={this.state.drawSectionWidth}\n                    height={this.state.drawSectionHeight}\n                    updateCurrentSignal={this.updateCurrentSignal}\n                ></DrawSignal>\n            </div>\n        )\n        let barColor = this.state.predictedMse ? this.state.predictedMse > this.state.threshold ? \"#ff0000\" : \"#008000\" : \"#808080\"\n        let modelOutput = (\n            <div className=\"  modeloutputbox rad5 \">\n                {/* <div className=\"mb10 boldtext\"> Model Prediction</div> */}\n                <div className=\"flex  \">\n                    <div className=\"iblock \">\n                        <div ref=\"\" className=\"resetbox vizloadingbox\" style={{ opacity: (this.state.isLoading) ? 1 : 0, width: (this.state.isLoading) ? \"34px\" : \"0px\" }} >\n                            <Loading\n                                className=\" mr10\"\n                                active={true}\n                                small={true}\n                                withOverlay={false}\n                            > </Loading>\n                        </div>\n                    </div>\n                    <div className=\"iblock thresholdbox flex flexjustifycenter mr5 pl10 pr10 pt5 pb5\">\n                        <div>\n                        <div style={{fontSize:\"18px\"}} className=\"mediumdesc textaligncenter boldtext thresholdtext\">{this.state.predictedMse.toFixed(3) }</div>\n                        <div className=\"smalldesc textaligncenter mt5\">mse</div>\n                        </div>\n                    </div>\n                    <div className=\"flexfull  \">\n                        {this.testData.length > 0 &&\n                            <div className=\"mt5 mediumdesc \">\n                                {this.state.predictedMse !== 0 &&\n                                    <div className=\"mr10  \">\n                                        <div className=\"mr10 boldtext \">\n                                        MODEL PREDICTION :\n                                        \n                                        &nbsp;\n                                        {this.state.predictedMse > this.state.threshold ? \"ABNORMAL\" : \"NORMAL\"}\n                                            </div>\n\n                                        <div className=\"pt5 mediumdesc\">  Explanation:   [mse = <strong>{this.state.predictedMse.toFixed(3)}</strong> ]  is \n                                        <strong>{this.state.predictedMse > this.state.threshold ? \" above \" : \" below\"}</strong> the <strong> {this.state.threshold.toFixed(3)}</strong> threshold \n                                    </div>\n                                    </div>\n                                }\n                                {this.state.predictedMse === 0 &&\n                                <div className=\"mr10  \">\n                                        <div className=\" boldtext \">\n                                        MODEL PREDICTION \n                                        </div> \n                                        <div className=\"pt5 mediumdesc\">\n                                        Select a signal or draw one!\n                                        </div>\n                                    </div>\n                            }\n                                <div style={{ backgroundColor: barColor }} ref=\"predictioncolordiv\" className=\"mt5  colorbox redbox\"></div>\n                            \n\n                            </div>\n                        }\n                    </div>\n                </div>\n                <div className=\"iblock \">\n                    <LineChart\n                        data={this.state.selectedData}\n                        predictedData={this.state.predictedData}\n                        predictedColor={barColor}\n                        index={this.state.selectedIndex}\n                        lastUpdated={this.modelDataLastUpdated}\n                        color={this.chartColorMap[this.testData[this.state.selectedIndex].target].colornorm}\n                        width={this.modelChartWidth}\n                        height={this.modelChartHeight}\n                    > </LineChart>\n                </div>\n            </div>\n        )\n\n        // if (this.refs[\"datasetexamplebox\"]) {\n        //     console.log(this.refs[\"datasetexamplebox\"].offsetWidth);\n        // } \n        \n        \n\n        return (\n            <div>  \n                <div className=\"mynotif mt10 h100 lh10  lightbluehightlight maxh16  mb10\">\n                    <div className=\"boldtext mb5\">  A Gentle Introduction to Anomaly Detection with Autoencoders</div>\n                    {this.state.apptitle} is an interactive visualization tool for exploring\n                    how a deep learning model can be applied to the task of anomaly detection (on stationary data).\n                    Given an  <a href=\"https://en.wikipedia.org/wiki/Electrocardiography\" target=\"_blank\" rel=\"noopener noreferrer\">ECG</a>  signal sample, an autoencoder model (running live in your browser) can predict if it is\n                     normal or abnormal. To try it out, <strong>click</strong> any of the test ECG signals from the ECG5000 dataset below,\n                    or better still, draw a signal to see the model's prediction!\n                    <div className=\" mediumdesc boldtext\">\n                        <span className=\"\"> Disclaimer: </span> This prototype is built for demonstration purposes only \n                        and is not intended for use in any medical setting.\n                    </div>\n                </div>\n\n                {this.state.showError && <div className=\"errordiv p10 mb10\"> \n                    {this.state.errorMsg}\n                </div>}\n\n\n                {!this.state.showDrawData && < div className=\"mediumdesc pb10 \"> <strong>Click</strong> on a data sample below to see the prediction of a trained autoencoder. </div>}\n                {this.state.showDrawData &&  <div className=\"mediumdesc pb10 \"> <strong>Draw</strong> a signal and view the autoencoders prediction. What types of signal shapes is it sensitive to? </div>}\n\n                <div className=\"mb10 lowerbar\">\n                    <div onClick={this.setDatasetECG.bind(this)} className={\"datasettab clickable iblock mr5 \" + (this.state.showDrawData ? \"\" : \" active\")}> ECG5000 Dataset</div>\n                    <div onClick={this.setDatasetDraw.bind(this)} className={\"datasettab clickable iblock mr10 \" + (this.state.showDrawData ? \" active\" : \" \")}> Draw your ECG data</div>\n \n                </div>\n\n                <div className=\"flex flexwrap \">\n\n                    <div ref=\"datasection\" className=\" flexwrapitem  flex40 mr10 \" >\n                        {<div ref=\"datasetexamplebox\" className={\" \" + (this.state.showDrawData ? \" displaynone\" : \" \")}>\n                            {datasetExamples}\n                        </div>}\n                        {<div className={\" \" + (!this.state.showDrawData ? \" displaynone\" : \" \")}>\n                            {dataSketchPad}\n                        </div>}\n                    </div>\n \n                    <div className=\"flexwrapitem flex20 flex  \">\n                       <div > {modelOutput}</div>\n                        <div className=\"flex20 flexpushout \"></div>\n                    </div>\n                </div>\n\n                <div className=\"lh10 lightgreyback mt5 p10 \">\n                     \n                   The autoencoder is trained using normal ECG data samples. It has never seen any of the test signals above, \n                    but correcly predicts (most of the time) if a given signal is normal or abnormal. So, how does the autoencoder \n                    identify anomalies? Why is  <span className=\"italics\">mean squared error</span> a useful metric?\n                    What is the <span className=\"italics\">threshold</span>   and how is it set? Read on to learn more!\n                       \n                </div>\n\n\n\n                {\n                    <div className=\" \">\n\n                        <div className=\"\">\n                            <div className=\"flex\">\n                                <div className=\"flex20  lh10 mb10 \">\n                                    <div className=\"sectiontitle mt10 mb5\"> How does the Autoencoder work? </div>\n                                    \n                                    {this.state.showAutoEncoderViz &&\n                                        \n                                        <div className=\" pl10 floatright autoencodervizbox  \"  >\n                                        \n                                        <div className=\"vizcaption w380 mediumdesc lhmedium pb5\">\n                                        Example below shows the architecture of a two layer autoencoder with 7 and 3 units (neurons) respectively.\n                                        Click the <span className=\"italics\">train a model</span> tab to build and train one from scratch.\n                                        </div>\n\n                                        <ComposeModel\n                                            hiddenDims={this.hiddenDim}\n                                            latentDim={[this.latentDim]}\n                                            isTraining={false}\n                                            isUpdatable={false}\n                                            updateModelDims={null}\n                                            adv={\"track\" + this.state.showDrawData}\n                                        />\n\n                                       \n                                    </div>}\n\n\n                                   \n\n                                    An <a href=\"https://en.wikipedia.org/wiki/Autoencoder\" target=\"_blank\" rel=\"noopener noreferrer\">Autoencoder</a> [1] is a type of\n                                    artificial neural network used to learn efficient (low dimensional) data representations in an unsupervised manner.\n                                    It is typically comprised of two components\n                                    - an <strong>encoder</strong> that learns to map input data to a low dimension representation ( <strong>also called a bottleneck, denoted by z</strong> )\n                                    and a <strong>decoder</strong> that learns to reconstruct the original signal from the\n                                    low dimension representation.\n                                    The training objective for the autoencoder model is to minimize the reconstruction\n                                    error - the difference between the input data and the reconstructed output.\n                                    \n                                    <div className=\"boldtext  pt5\"> Applying Autoencoders for Anomaly Detection</div>\n                                    \n                                    <div className=\"lh10  p10 \"> \n                                        An anomaly (outlier, abnormality) is defined as “an observation which deviates so much from \n                                        other observations as to arouse suspicions that it was generated by a different mechanism” - Hawkins 1980.\n                                    </div>\n                                    \n                                    While autoencoder models have been widely applied for dimensionality reduction (similar to techniques such as PCA), \n                                    they can also be used for anomaly detection[3]. In fact, a few deep learning models that are comprised of encoders and decoders\n                                    (e.g. Sequence to Sequence Models[5] , Variational Autoencoders[2], Bidirectional GANs[4]), with some modifications, also work well for this task!\n\n                                    So, how is this all achieved?\n                                    <br/>\n                                    It turns out that if  we train the model on normal data (or unlabelled data with very few abnormal samples), it  learns a \n                                    reconstruction function that works \n                                    well for <span className=\"italics\"> normal looking data  </span>(low reconstruction error)\n                                    and works poorly for abnormal data (high reconstruction error).\n                                    We can then use reconstruction error as a signal for anomaly detection.\n                                    <br />\n                                    In particular, if we visualize a histrogram of reconstruction errors generated by a trained autoencoder, we hopefully\n                                    will observe that the distribution of errors for normal samples is overall smaller and\n                                    markedly separate from the distribution of errors for abnormal data. \n\n                                    \n                                    \n                                    <br />\n                                    <strong className=\"greycolor\"> Note</strong>: We may not always have labelled data, but we can can assume (given the rare nature of anomalies) that the majority of data points for most\n                                    anomaly detection use cases are normal. See the section below that discusses the impact of data composition (% of abnormal data) on model performance.\n                                    \n\n                                    \n                                    \n                                    {/* Click the <a className=\"italics\" href=\"#train\" rel=\"noopener noreferrer\">train a model</a> tab to\n                                    interactively build and train an autoencoder,  evaluate its performance and visualize the histogram of errors for normal and abnormal test data. */}\n\n                                </div>\n\n\n                            </div>\n\n                        </div>\n\n\n                        <div className=\"sectiontitle mt10 mb5\"> The Dataset  </div>\n                        <div className=\"mb10 lh10\">\n                            This prototype uses the   <a href=\"http://www.timeseriesclassification.com/description.php?Dataset=ECG5000\" target=\"_blank\" rel=\"noopener noreferrer\"> ECG5000 dataset</a> which\n                            contains 5000 examples of ECG signals from a patient. Each data sample (corresponds to an extracted heartbeat containing 140 points) has been labelled as normal \n                            or being indicative of heart conditions related to congestive heart failure - {dataLegendSmall}.\n\n                        </div>\n                        <div className=\"\">\n                            <div className=\"flex lh10 flexwrap\">\n                                <div className=\"flex40 flexwrapitem  mb10 pr10\">\n                                    <div className=\"pb5 boldtext\"> Data Transformation  </div>\n                                    Prior to training the autoencoder, we first apply a minmax scaling transform to the input data \n                                    which converts it from its original range (-5 to 2) to a range of  (0 to 1)  \n                                    This is done for two main reasons. First, <a href=\"https://www.jeremyjordan.me/batch-normalization/\" target=\"_blank\" rel=\"noopener noreferrer\">existing   research</a>  suggests that neural networks in general train better when input values  \n                                     lie between 0 and 1 (or have zero mean and unit variance).  Secondly, scaling the data supports the learning objective \n                                    for the autoencoder (minimizing reconstruction error) and makes the results more interpretable. \n                                    In general, the range of output values from the autoencoder is dependent on the type of activation function used in the output layer.\n                                    For example, the tanh activation function outputs values in the range of -1 and 1, sigmoid outputs values in the range of 0 - 1 \n                                    In the example above, we use the sigmoid activation function in the output layer of \n                                    the autoencoder, allowing us directly compare the transformed input signal to the output data when computing the means square error metric during training.\n                                    In addition, having both input and output in the same range allows us to visualize the differences that contribute to the anomaly classification.\n                                    \n                                    <br />\n                                    <strong className=\"greycolor\"> Note:</strong> \n                                    The parameters of the scaling transform should be <a href=\" https://sebastianraschka.com/faq/docs/scale-training-test.html\" target=\"_blank\" rel=\"noopener noreferrer\"> computed only on train data</a> and \n                                     then <span className=\"italics\"> applied </span> to test data. \n                                    \n\n                            </div>\n                                <div className=\" flex20 flexwrapitem \">\n                                   <div className=\"vizcaption lhmedium pt10  mediumdesc pb10\">\n                                            Example below shows sample ECG data <span className=\"italics\">{this.state.isDataTransormed ? \"after \" : \"before\"}</span> minmax (0,1) scaling transformation.\n                                        </div>\n                                    <div className=\"flexfull  lh10 p10 overflowhidden  greyborder\">\n                                     \n                                        \n                                    {this.state.isDataTransormed ?  this.sampleTestData + \" ...\": this.sampleTransformedTestData + \" ...\" }\n                                \n                                        <div className = \"mt5 mr10\">\n                                            <Button\n                                                className=\"bwidthtransform\"\n                                            size={\"small\"}\n                                            renderIcon={null}\n                                            onClick={this.toggelTransform.bind(this)}\n                                        > {this.state.isDataTransormed ?  \"Inverse Transform\": \"Transform\"} </Button>\n\n                                        </div>\n                                    \n                                    </div> \n                                </div>\n\n\n                                <div className=\"border displaynone rad4 p10 \" style={{ width: \"300px\", height: \"300px\" }}>\n                                    Interactive replay of training run visualization\n                            </div>\n                            </div>\n                             \n\n                        </div>\n\n                        <div className=\"sectiontitle mt10 mb5\"> Model Implementation and Training </div>\n                        <div className=\"\">\n                            <div className=\"flex flexwrap8\">\n                                <div className=\"flex40 flexwrapitem8 lh10 mb10 \">\n                                  The autoencoder in this prototype (visualized above) has two layers in its encoder and decoder respectively.\n                                  It is implemented using the <a href=\"https://www.tensorflow.org/js/guide/layers_for_keras_users\" target=\"_blank\" rel=\"noopener noreferrer\">Tensorflow.js layers api </a> (similar to the keras api). \n                                     The encoder/decoder are specified   using dense layers, relu activation function, and \n                                     the Adam optimizer (lr = 0.01) is used for training. Given that each ECG data sample is comprised of 140 values, \n                                     both the encoder input vector  and decoder output layer are of size 140.\n                                        \n                                  <div className=\" mt10 mb10 lh10  lightbluehightlight maxh16   mb10\">\n                                     Tensorflow.js code for <a href=\"https://github.com/victordibia/anomagram/blob/master/app/src/components/train/models/ae.jsx\" target=\"_blank\" rel=\"noopener noreferrer\">specifying the autoencoder</a> can\n                                    be found in the project repository on <a href=\"https://github.com/victordibia/anomagram/\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>. \n                                  </div>\n                                      As training progresses, the model's weights are updated to minimize the difference between the encoder input \n                                      and decoder output for the training data (normal samples).  \n                                    \n                                    To illustrate the relevance of the training process to the anomaly detection task, we can visualize  \n                                    the histogram of reconstruction error generated by the model (see figure to the right). At initialization (epoch 0), the untrained autoencoder \n                                    has not learned to reconstruct normal data and hence makes fairly random guesses in its attempt\n                                    to reconstruct any input data - thus we see a similar distribution of errors for both normal and abnormal data.\n                                    As training progresses, the model gets better at reconstructing normal data, and its reconstruction error markedly \n                                    becomes smaller for normal samples leading to a distinct distribution for normal compared to abnormal data.\n                                    As both distributions <span className=\"italics\">diverge</span>, we can set a threshold or cutoff point; any data point \n                                    with error above this threshold is termed an anomaly and any data point below this is termed normal. \n\n\n                                    <div className=\"pb5 pt5 boldtext\"> Selecting a Threshold </div>\n                                    The current setup is semi-supervised, in that we have \n                                    labels for a small pool of validation/test samples. Using these labels (and some domain expertise), \n                                    we can automatically determine this threshold - we explore the range of MSE values for each data point in the validation set  \n                                    and select our threshold as the point that yields the best accuracy. But is accuracy enough?\n                                    \n                                    <br/>\n                                    <strong className=\"greycolor\"> Note</strong>: In the absence of labelled data, \n                                    and if we make a few assumptions (most datapoints are normal and that the mse values follow a normal distribution), \n                                    we can  use statistics such as standard deviation and percentiles to infer a good threshold.\n\n                                    {/* TODO: Show graphic where we have 200 datapoints, 30 abnormal samples. Threshold as standard deviation from mean. Or \n                                    Or simply plot a bar chart of all 230 items \n                                    */}\n\n                              \n                            </div>\n\n                                {this.state.showMseViz &&\n                                    <div className=\"  pl10 flexwrapitem8  floatright\">\n\n                                    <div className=\"flex \">  \n                                        <div className=\"flexfull\"> \n                                            <div className=\"flex mb10\">\n                                                <div className=\" mr5\"> \n                                                    <div className=\"epochvalue textaligncenter\">\n                                                     {this.state.trainVizEpoch}\n                                                    </div>\n                                                    <div className=\"textaligncenter smalldesc\">\n                                                        Epoch\n                                                    </div>\n\n                                                </div>\n                                                <div className=\"flexfull \">\n                                                    <div className=\"mediumdesc w350   lhmedium\" > \n                                                            <span> Example below shows the histogram of errors for <span className=\"boldtext\">500</span> test data points during training epochs. At</span>\n                                                            <span className=\"boldtext\"> Epoch {this.state.trainVizEpoch}</span>, \n                                                            <span className=\"italics\" ref=\"mseexplanation\"> {this.mseExplanations[this.state.trainVizEpoch + \"\"] ? this.mseExplanations[this.state.trainVizEpoch + \"\"] : this.refs[\"mseexplanation\"].textContent}</span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            \n                                            \n                                            <div className=\"greyhighlight pl10 mb10 pt10 flex pb5\"> \n                                                \n                                                <div className=\" iblock \">\n                                                    <div\n                                                        onClick={this.toggleVizHistPlaying.bind(this)}\n                                                        className={(\"iblock circlemedium circlebutton ml10 mr5 flexcolumn flex flexjustifycenter clickable \") }>\n                                                        {!this.state.histPlaying && <PlayFilledAlt16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                                                        {this.state.histPlaying && <StopFilledAlt16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                                                    </div>\n                                                    <div className=\"smalldesc textaligncenter pt10 pb5 replaylabelbox\">  {this.state.histPlaying ? \"Stop Replay\" : \"Replay Training\"} </div>\n                                                </div>\n                                                    \n                                                    <Slider\n                                                    className=\"flexfull touchnoscroll border\"\n                                                    min={0} //{(this.state.minThreshold.toFixed(4) * 1)}\n                                                    max={49}//{(this.state.maxThreshold.toFixed(4) * 1)}\n                                                    step={1}\n                                                    minLabel={\"\"}\n                                                    maxLabel={\"\"}\n                                                    value={this.state.trainVizEpoch}\n                                                    stepMuliplier={10}\n                                                    // disabled={this.state.isTraining ? true : false}\n                                                    labelText={\"Move slider to view mse histogram at each epoch. \"}\n                                                    hideTextInput={true}\n                                                    onChange={this.updateTrainVizEpoch.bind(this)}\n                                                    />\n                                                \n                                            </div>\n                                           \n                                             \n                                        </div>\n\n                                    </div>\n                                    \n                                    \n                                    \n                                    {this.trainMse[\"mse\"] && <HistogramChart\n                                        data={{\n                                            data: this.trainMse[\"mse\"][this.state.trainVizEpoch],\n                                            chartWidth: 380,\n                                            chartHeight: 240,\n                                            epoch: 2 + this.state.trainVizEpoch,\n                                            threshold: this.state.vizThresold\n                                        }}\n                                    ></HistogramChart>}\n                                     \n                            </div>}\n                            </div>\n\n                        </div>\n\n\n                        <div className=\"sectiontitle mt10 mb5\"> Model Evaluation: Accuracy is NOT Enough </div>\n                        <div className=\"\">\n                            <div className=\"flex flexwrap\">\n                                <div className=\"flex40  flexwrapitem lh10 mb10 pr10\">\n                                    For most anomaly detection problems, data is usually imbalanced - the number of labelled normal samples vastly out number\n                                    abnormal samples. For example, for every 100 patients who take an\n                                    ECG test, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3319226/\">less than 23 are likely</a> to have \n                                    some type of abnormal reading. This sort of data imbalance introduces issues that make accuracy \n                                    an inssufficient metric. Consider a naive model (actually a really bad model) \n                                    that simply flags every sample as normal. Given our ECG scenario above, it would have an accuracy of <strong> > 77%</strong> despite being a really unskilled model. \n                                    Clearly, accuracy alone does not \n                                    tell the complete story i.e. how often does the model flag an ECG as abnormal when it is indeed\n                                     abnormal (<strong>true positive</strong>), abnormal when it is normal (<strong>false positive</strong>)\n                                    normal when it is abnormal (<strong>false negative</strong>) and normal when it is indeed normal (<strong>true negative</strong>). \n                                     \n                                    Two important metrics can be applied to address these issues - precision aand recall. <strong>Precision</strong> expresses \n                                    the percentage of positive predictions that are correct\n                                    and is calculated as   (true positive / true positive + false positive ). <strong>Recall</strong> expresses the \n                                    proportion of actual positives that were corrected predicted (true positive / true positive + false negative). \n                                    \n                                \n                                    <br/>\n                                    \n                                    Depending on the use case, it may be desirable to optimize a model's performance for high precision or high recall. \n                                    This tradeoff between precision and recall can be \n                                    adjusted by the selection of a threshold (e.g. a low enough threshold will yield excellent recall but reduced precision). \n                                    In addition, the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Receiver_operating_characteristic\">Receiver Operating Characteristics</a>  (ROC) curve provides a visual assessment of a model's skill (area under the curve - AUC)\n                                    and is achieved by plotting the true positive rate against the false positive rate at various values of the threshold.\n                                    The <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/F1_score\">F score</a>  metric has also been\n                                     introduced to summarize both precision and recall while reflecting an emphasis on either precision or recall given its β parameter .\n                                     \n\n                            </div>\n\n                                <div className=\" p10 flex20 flexwrapitem\" >\n                                    \n\n                                    \n\n                                <div className={\"iblock perfmetrics w100 \" + (this.state.isTraining ? \" disabled \" : \" \")}>\n                            \n                                        <div className=\"mediumdesc lhmedium pb10\">\n                                            Example below the performance of a trained autoencoder model. \n                                            Move the slider to see how threshold choices impact precision recall metrics. \n                                            \n                                        </div>\n                                        \n\n                                        \n\n                            <div className=\"mb5 greyhighlight p10 touchnoscroll\">\n                                <Slider\n                                    className=\"w100 border\"\n                                    min={0} //{(this.state.minThreshold.toFixed(4) * 1)}\n                                    max={100}//{(this.state.maxThreshold.toFixed(4) * 1)}\n                                    step={2}\n                                    minLabel={\"%\"}\n                                    maxLabel={\"%\"}\n                                    value={((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100}\n                                    stepMuliplier={10}\n                                    disabled={this.state.isTraining ? true : false}\n                                    labelText={\"Threshold \" + (this.state.bestMetric.threshold).toFixed(4) + \" [ \" + (((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100).toFixed(0) + \" % ] \"}\n                                    hideTextInput={true}\n                                    onChange={this.updateThreshold.bind(this)}\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.acc * 100)) }} className=\"metricguage mb5  greyhighlight accuracybox  textaligncenter mr5 flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.acc * 100).toFixed(2)}  %</div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Accuracy </div>\n                                </div>\n                                 \n\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.precision * 100)) }} className=\"metricguage mb5 greyhighlight  textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.precision ).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Precision </div>\n                        </div>\n                        \n                        <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.recall * 100)) }} className=\"metricguage mb5 greyhighlight  textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.recall).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Recall </div>\n                                </div>\n\n                            </div>\n                            <div className=\"mb5 flex\">\n\n                                <div style={{ borderLeftColor: percentToRGB(100 - (this.state.bestMetric.fpr * 100)) }} className=\"metricguage flex5 mr5  greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue textaligncenter\"> {(this.state.bestMetric.fpr * 100).toFixed(2)}  % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> False Positive Rate </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB(100 - (this.state.bestMetric.fnr * 100)) }} className=\"metricguage flex5   greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.fnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc displayblock mediumdesc p5\"> False Negative Rate </div>\n                                </div>\n\n                            </div>\n                            <div className=\"flex\">\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.tpr * 100)) }} className=\"metricguage flex5  mr5 greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tpr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mr10 mediumdesc p5\"> True Positive Rate </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.tnr * 100)) }} className=\"metricguage flex5  greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> True Negative Rate </div>\n                                </div>\n                            </div>\n\n                        </div>\n                            </div>\n                            </div>\n\n                        </div>\n\n                        <div className=\"sectiontitle mt10 mb10\"> Some Insights on the Effect of Model/Training Parameters </div>\n                        <div className=\"mb10 lh10\">\n                        Some interesting insights that can be observed while modifying the training parameters for the model \n                        are highlighted below. You can explore them via the <span className=\"italics\"> train a model</span> interactive tab.\n                        </div>\n                        <div className=\"flex flexwrap\">\n \n\n                            <div className=\"flex20 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                    <div className=\"pb5 boldtext\"> Regularization, Optimizer, Batch Size </div>\n                                    Neural networks can approximate complex functions. They are also likely overfit, given limited data.\n                                    In this prototype, we have relatively few samples (2500 normal samples), and we can observe \n                                    signs of overfitting (train loss is less than validation loss). \n                                    Regularization (l1 and l2) can be an effective way to address this.\n                                    In addition, the choice of learning rate and optimizer can affect the speed and effectiveness \n                                    (time to peak performance) of training. For example using Adam reaches peak accuracy within fewer epochs compared to optimizers like rmsprop and good old sgd.\n                                    In the <span className=\"italics\"> train a model</span> interactive section, you can apply activation regularization - l1, l2 and l1l2 (regularization rate is set to learning rate) and observe its impact!\n                                    You can also try out 6 different optimizers (Adam, Adamax, Adadelta, Rmsprop,Momentum, Sgd), with various learning rates.\n                                </div>\n\n\n                            </div>\n\n                            \n                           \n\n                            <div className=\"flex20 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                    <div className=\"pb5 boldtext\"> Abnormal Percentage </div>\n                                    We may not always have labelled normal data to train a model.\n                                    However, given the rarity of anomalies (and domain expertise), we can assume that unlabelled data is mostly  \n                                    comprised of normal samples. Does model performance degrade with an changes in the percentage of abnormal samples in the dataset? \n                                    \n\n                                    The <span className=\"italics\"> train a model</span>  section, you can specify the percentage of abnormal samples  to include when \n                                    training the autoencoder model. We see that with <strong>0%</strong> abnormal data, the model AUC is <strong>~96%</strong>.\n                                   At <strong>30%</strong> abnormal sample composition, AUC drops to <strong>~93%</strong>. \n                                    At 50% abnormal datapoints, there is just not enough information in the data \n                                    that allows the model learn a pattern of normal behaviour. It essentially learns to reconstruct normal and abnormal \n                                    data equally well and mse is no longer a good measure of anomaly.\n                                    At this point, model performance is only slightly above random chance (AUC of 56%).\n \n                                </div>\n                            </div>\n                        </div>\n\n                        \n                        <div   className=\"sectiontitle mt10 mb5\"> Ok .. The Road to Production? </div>\n\n                        <div className=\"boldtext  pt5\"> Why Use An Autoencoder? </div>\n                        <div className=\"lh10 pb10 pt5\">\n                        Why is an autoencoder (or any other related deep learning model)  a good candidate for anomaly detection problems?\n                                    First, this approach allows us to train the model with mostly unlabelled data, after which we can evaluate and tune our threshold using  \n                                    a small amount of labelled data. This alleviates the burden/cost associated with amassing a large amount of labelled training data.\n                                    Next, by using an anomaly threshold, the model is more likely to detect \n                                    new anomalies that have previously been unseen (unknown unknowns). To explore this, try drawing a really \n                                    squiqqly line that is really unrepresentative of what an ECG signal could be and see the model's output.\n                                    On the other hand, if we cast this problem as a classic classificatioin problem (assuming labels exist), we are less likely to detect unknown unknowns.\n                                    Finally, deep learning models work well in approximating complex non-linear functions (also ... watchout for overfitting!); they can corrrectly model non-linear patterns that \n                                    make up normal samples and can do this with minimal tuning compared to other methods. \n                                   </div>\n                        \n                        <div className=\"flex flexwrap\">\n \n\n                            <div className=\"flex20 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                    <div className=\"pb5 boldtext\"> Discretizing Data </div>\n                                    There are a few important properties of the current dataset that make the autoencoder approach possible.\n                                    First, while ECG is  <span className=\"italics\">time series</span> data, the current dataset has been\n                                    discretized i.e. chunked into fixed-size <span className=\"italics\">slices</span> of 140 values, where each slice constitutes\n                                    a sample in the dataset. This discretization is performed using some domain knowledge (each set of 140 values corresponds to a heartbeat!),\n                                    making each sample comparable or identical. Next, we can also observe that the data is stationary - i.e. its mean and variance do not change with time. This way, it is more likely that \n                                    the values being predicted at test time lie in the same range (distribution) as values seen during training.\n\n                                    In order to move to production with your own data using the autoencoder approach discussed above, it is important that similar conditions are met - stationarity \n                                    is handled (if it exists) and the dataset is constructed such that each sample is identical as well as independent. \n                                    {/* In some cases, it is also necessary that each sample is independent. */}\n                                </div>\n\n\n                            </div>\n\n                            \n                           \n\n                            <div className=\"flex20 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                    <div className=\"pb5 boldtext\"> Model serving </div>\n                                    For production purposes, there are a couple  options. First, we can integrate our \n                            Tensorflow.js model code (model.predict) <span className=\"italics\">as is</span> into a Node.js web server application.\n                            However, we will be using either the <a href=\"https://www.tensorflow.org/js/guide/nodejs#tensorflow_cpu\" target=\"_blank\" rel=\"noopener noreferrer\">Tensorflow.js CPU</a> backend\n                            which accelerates computation via the Tensorflow C binary, or the <a href=\"https://www.tensorflow.org/js/guide/nodejs#tensorflow_gpu\" target=\"_blank\" rel=\"noopener noreferrer\">Tensorflow.js GPU</a>  backend \n                            which accelerates computation via an available CUDA enabled GPU. This option makes sense for teams already heavily invested in the Nodejs stack.\n                            Our second option is to rewrite the model using the Keras API. The good part is that the Tensorflow.js (layers) api \n                            has an  <a href=\"https://www.tensorflow.org/js/guide/layers_for_keras_users\" target=\"_blank\" rel=\"noopener noreferrer\">almost 1:1</a>   mapping with the Keras API, making rewrites easy. A keras model can be served in \n                            production using <a href=\"https://www.tensorflow.org/tfx/tutorials/serving/rest_simple\" target=\"_blank\" rel=\"noopener noreferrer\">Tensorflow serving</a>  .\n\n \n                                </div>\n                            </div>\n                        </div>\n\n                        \n                        <div className=\" mt10 mb10 lh10  lightbluehightlight   mb10\" >\n                            Congrats on making it this far! What's next?\n                            Click the <a className=\"italics\" href=\"#train\" rel=\"noopener noreferrer\">train a model</a> tab to\n                                       interactively build and train an autoencoder,  \n                                       evaluate its performance and visualize model metrics for normal and abnormal test data.\n                        </div>\n                       \n                        \n\n                        <div  className=\"sectiontitle mt10 mb5\"> Closing Notes </div>\n                        <div className=\"flexfull lh10 mb10 pr10\">\n                                    In this prototype, we have considered the task of detecting anomalies in ECG data.\n                                    We used an autoencoder and demonstrate some fairly good results with minimal tuning. \n                                    We have also explored how and why it works. This and other \n                                    neural approaches (Sequence to Sequence Models, Variational Autoencoders, BiGANs etc) can be particularly \n                                    effective for the task of anomaly detection on multivariate or high dimensional datasets \n                                    such as images (think convolutional layers instead of dense layers), multivariate time series, time series with multiple external regressors.\n                                    <br />\n                                    <strong className=\"greycolor\"> Note</strong>: A deep learning model\n                                    is  not always  the best tool for the job. Particularly, for univariate data (and low dimension data), autoregressive linear models \n                                    (linear regression, ARIMA family of models for time series [6], etc), Clustering (PCA, KMeans, etc), Nearest Neighbour (KNNs) can be very fast and effective. \n                                    \n                                     \n                                    Interested in learning more about other deep learning approaches to anomaly detection? My colleagues and I cover additional details on this\n                                    topic in the upcoming <a href=\"http://experiments.fastforwardlabs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Fast Forward Labs</a>  2020 report\n                                     on <a href=\"https://www.cloudera.com/products/fast-forward-labs-research.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Deep Learning for Anomaly Detection.</a>  \n                                    \n                            </div> \n\n                        <div className=\"sectiontitle mt10 mb5\"> Further Reading </div>\n                        <div className=\"\">\n                                <div className=\" lh10 mb2  pr10\">\n                                 [1] Goodfellow, Ian, Yoshua Bengio, and Aaron Courville. MIT Press 2016 <a href=\"http://www.deeplearningbook.org/contents/autoencoders.html\" target=\"_blank\" rel=\"noopener noreferrer\">Deep learning. Chapter 14, Autoencoders</a>  \n                            </div> \n                            <div className=\" lh10 mb2 pr10\">\n                                 [2] An, J., & Cho, S. (2015). Variational autoencoder based anomaly detection using reconstruction probability. Special Lecture on IE, 2(1).\n                            </div> \n                            <div className=\" lh10 mb2 pr10\">\n                                [3] Zhou, Chong, and Randy C. Paffenroth. \"Anomaly detection with robust deep autoencoders.\" Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 2017.\n                            </div>\n                            <div className=\" lh10 mb2 pr10\">\n                                [4] Di Mattia, Federico, et al. \"A Survey on GANs for Anomaly Detection.\" arXiv preprint arXiv:1906.11632 (2019).\n                            </div>\n                            <div className=\" lh10 mb2 pr10\">\n                                [5] Malhotra, Pankaj, et al. \"LSTM-based encoder-decoder for multi-sensor anomaly detection.\" arXiv preprint arXiv:1607.00148 (2016).\n                            </div>\n                            <div className=\" lh10 mb2 pr10\">\n                                [6] Rob Hyndman 2018. A brief history of time series forecasting competitions. https://robjhyndman.com/hyndsight/forecasting-competitions/\n                            </div>\n                            \n                            \n                        </div>\n\n\n                    </div>\n                }\n\n\n\n\n\n\n                <div>\n                    {/* A VAE (an extension of an AE) can allow us generate sampled data without */}\n                </div>\n\n\n\n\n\n                <br />\n                <br />\n                <br />\n                <br />\n            </div>\n        )\n    }\n}\n\nexport default Viz","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport React, { Component } from \"react\";\nimport \"./rocchart.css\"\nimport * as d3 from \"d3\"\n\n\nclass ROCChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.dotRadius = 1\n    }\n\n    componentDidMount() {\n        this.drawGraph(this.props.data.data)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n\n        // if ((prevProps.data.isTraining !== this.props.data.isTraining)) {\n        //     console.log(\"props updated\");\n        //     this.updateGraph(this.props.data.data)\n        // }\n\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            this.updateGraph(this.props.data.data)\n        }\n    }\n\n    updateGraph(data) {\n        let self = this\n\n        d3.select(\"div.ROCChart\").selectAll(\".rocnode > *\").remove();\n\n        this.setupScalesAxes(data)\n        let svg = d3.select(\"div.ROCChart\").transition();\n\n        svg.select(\".rocline\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.rocLine(data)); // 11. Calls the line generator \n\n        svg.select(\".rocarea\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.rocArea(data)); // 11. Calls the line generator \n\n        d3.select(\"div.ROCChart\")\n            .select(\".rocnode\")\n            .selectAll(\"rocdot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.fpr); })\n            .attr(\"cy\", function (d) { return self.yScale(d.tpr); })\n            .attr(\"r\", this.dotRadius)\n            .attr(\"class\", \"rocdot\")\n\n\n\n\n        // svg.select(\".lossvalcolor\")\n        //     .duration(self.animationDuration)\n        //     .attr(\"d\", this.valLine); // 11. Calls the line generator  \n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -30).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this \n        this.chartMargin = { top: 10, right: 10, bottom: 55, left: 55 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        // this.xScale = d3.scaleLinear()\n        //     .domain([d3.min(data, function (d) { return d.fpr }),\n        //     d3.max(data, function (d) { return d.fpr })]) // input \n        //     .range([0, this.chartWidth]); // output\n        this.xScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([0, this.chartWidth]); // output\n\n\n        // this.yScale = d3.scaleLinear()\n        //     .domain([d3.min(data, function (d) { return d.tpr }),\n        //     d3.max(data, function (d) { return d.tpr })]) // input \n        //     .range([this.chartHeight, 0])\n        this.yScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n    }\n    drawLines(svg, data) {\n        let self = this\n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"rocline roccolor\") // Assign a class for styling  \n            .attr(\"d\", this.rocLine); // 11. Calls the line generator \n\n\n        svg.append(\"path\")\n            .datum(data)\n            .attr(\"class\", \"rocarea\")\n            .attr(\"d\", this.rocArea);\n\n        svg.append(\"line\")\n            .attr(\"x1\", this.xScale(0))  //<<== change your code here\n            .attr(\"y1\", this.yScale(0))\n            .attr(\"x2\", this.chartWidth)  //<<== and here\n            .attr(\"y2\", this.yScale(this.yScale.domain()[1]))\n            .attr(\"class\", \"diagonal\")\n\n        svg.append('g')\n            .attr(\"class\", \"rocnode\")\n            .selectAll(\"rocdot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d, i) { return self.xScale(d.fpr) })\n            .attr(\"cy\", function (d) { return self.yScale(d.tpr) })\n            .attr(\"r\", this.dotRadius)\n\n\n        // svg.selectAll(\".rocdot\")\n        //     .data(data)\n        //     .join(\"circle\") // Uses the enter().append() method\n        //     .attr(\"class\", \"rocdot\") // Assign a class for styling\n        //     .attr(\"cx\", function (d, i) { return self.xScale(d.fpr) })\n        //     .attr(\"cy\", function (d) { return self.yScale(d.tpr) })\n        //     .attr(\"r\", 5)\n\n\n    }\n\n    drawGraph(data) {\n        let self = this\n\n        // data = [\n        //     { \"acc\": 0.7, \"threshold\": 1.2428572177886963, \"tp\": 3, \"tn\": 4, \"fp\": 3, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.42857142857142855, \"fnr\": 0, \"tnr\": 0.5714285714285714 },\n        //     { \"acc\": 0.5, \"threshold\": 1.2, \"tp\": 3, \"tn\": 2, \"fp\": 5, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.7142857142857143, \"fnr\": 0, \"tnr\": 0.2857142857142857 },\n        //     { \"acc\": 1, \"threshold\": 1.3, \"tp\": 3, \"tn\": 7, \"fp\": 0, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0, \"fnr\": 0, \"tnr\": 1 },\n        //     { \"acc\": 0.7, \"threshold\": 1.9, \"tp\": 0, \"tn\": 7, \"fp\": 0, \"fn\": 3, \"ton\": 7, \"top\": 3, \"tpr\": 0, \"fpr\": 0, \"fnr\": 1, \"tnr\": 1 },\n        //     { \"acc\": 0.8, \"threshold\": 1.25, \"tp\": 3, \"tn\": 5, \"fp\": 2, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.2857142857142857, \"fnr\": 0, \"tnr\": 0.7142857142857143 },\n        //     { \"acc\": 0.8, \"threshold\": 1.8, \"tp\": 1, \"tn\": 7, \"fp\": 0, \"fn\": 2, \"ton\": 7, \"top\": 3, \"tpr\": 0.3333333333333333, \"fpr\": 0, \"fnr\": 0.6666666666666666, \"tnr\": 1 },\n        //     { \"acc\": 0.9, \"threshold\": 1.75, \"tp\": 2, \"tn\": 7, \"fp\": 0, \"fn\": 1, \"ton\": 7, \"top\": 3, \"tpr\": 0.6666666666666666, \"fpr\": 0, \"fnr\": 0.3333333333333333, \"tnr\": 1 },\n        //     { \"acc\": 0.6, \"threshold\": 1.2428570985794067, \"tp\": 3, \"tn\": 3, \"fp\": 4, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.5714285714285714, \"fnr\": 0, \"tnr\": 0.42857142857142855 }]\n\n\n        this.setupScalesAxes(data)\n\n        this.rocLine = d3.line()\n            .x(function (d, i) { return self.xScale(d.fpr); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.tpr); }) // set the y values for the line generator \n        // .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.rocArea = d3.area()\n            .x(function (d) { return self.xScale(d.fpr); })\n            .y0(this.chartHeight)\n            .y1(function (d) { return self.yScale(d.tpr); });\n\n\n\n\n        const svg = d3.select(\"div.ROCChart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n        this.drawLines(svg, data)\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis);\n        // Create an axis component with d3.axisBottom\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"False Positive Rate\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"True Positive Rate\");\n\n\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        // console.log(this.props.data.data[his.props.data.data].loss.toFixed(2));\n\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendtopright p5 mediumdesc \">\n                    <div className=\"mb3 \">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\"> Area : {this.props.data.auc.toFixed(2)}  </div>\n                        <div className=\"iblock \"> </div>\n                    </div>\n                    <div>\n                        <div className=\"legendcolorbox mr5 redchance iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\"> Chance</div>\n                        <div className=\"iblock \"></div>\n                    </div>\n                </div>\n\n\n                <div className=\"ROCChart chartsvg\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ROCChart;    ","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport React, { Component } from \"react\";\nimport \"./scatterplot.css\"\nimport * as d3 from \"d3\"\n\n\nclass ScatterPlot extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n    }\n\n    componentDidMount() {\n\n\n        this.drawGraph(this.props.data.data)\n\n        // console.log(this.props.data);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n        }\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data[0]);\n\n        d3.select(\"div.scatterplotchart\").selectAll(\".scatternode > *\").remove();\n\n        this.setupScalesAxes(data)\n\n        let svg = d3.select(\"div.scatterplotchart\") //.transition();\n\n        // svg.selectAll(\"dot\").remove()\n\n        svg.select(\".scatternode\")\n            .selectAll(\"dot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.x); })\n            .attr(\"cy\", function (d) { return self.yScale(d.y); })\n            .attr(\"r\", 2.5)\n            .attr(\"class\", d => {\n                if (d.label + \"\" === \"0\") {\n                    return \"normcolor\"\n                } else {\n                    return \"anormcolor\"\n                }\n            })\n\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this\n\n        this.chartMargin = { top: 10, right: 5, bottom: 55, left: 45 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        this.xScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) { return d.x }), d3.max(data, function (d) { return d.x })]) // input  \n            .range([this.chartMargin.left, this.chartWidth - this.chartMargin.right])\n\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) { return d.y }), d3.max(data, function (d) { return d.y })]) // input  \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n\n\n    }\n\n    drawGraph(data) {\n        let self = this\n        this.setupScalesAxes(data)\n\n        const svg = d3.select(\"div.scatterplotchart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n\n        svg.append('g')\n            .attr(\"class\", \"scatternode\")\n            .selectAll(\"dot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.x); })\n            .attr(\"cy\", function (d) { return self.yScale(d.y); })\n            .attr(\"r\", 2.5)\n            .attr(\"class\", d => {\n                if (d.label + \"\" === \"0\") {\n                    return \"normcolor\"\n                } else {\n                    return \"anormcolor\"\n                }\n            })\n\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"Dimension 1\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"Dimension 0\");\n\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\")\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        return (\n            <div className=\"positionrelative mainchartbox\">\n                <div className=\"chartlegend legendtopleft p5 mediumdesc\">\n                    <div className=\"mb3\"> <div className=\"legendcolorbox mr5  themeblue iblock\"></div> Normal </div>\n                    <div> <div className=\"legendcolorbox mr5 themeorange iblock\"></div> Abnormal </div>\n                </div>\n\n                <div className=\"scatterplotchart\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ScatterPlot;","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport React, { Component } from \"react\";\nimport \"./losschart.css\"\nimport * as d3 from \"d3\"\n\n\nclass LossChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.dotRadius = 3.5\n    }\n\n    componentDidMount() {\n        this.drawGraph(this.props.data.data)\n        // console.log(this.props.data.data);\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevProps.data.epoch !== this.props.data.epoch) && this.props.data.data.length > 0) {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n            this.refs[\"trainlabel\"].innerHTML = this.props.data.data[this.props.data.data.length - 1].loss.toFixed(4)\n            this.refs[\"validationlabel\"].innerHTML = this.props.data.data[this.props.data.data.length - 1].val_loss.toFixed(4)\n            // console.log(this.props.data.data[0].loss, this.refs[\"trainlabel\"]);\n\n        }\n    }\n\n    updateGraph(data) {\n        let self = this\n\n        // d3.select(\"div.losschart\").selectAll(\".lossline\").remove();\n        // d3.select(\"div.losschart\").selectAll(\".pointdot\").remove();\n\n        this.setupScalesAxes(data)\n        let svg = d3.select(\"div.losschart\").transition();\n\n        svg.select(\".losstraincolor\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.trainLine(data)); // 11. Calls the line generator \n\n        svg.select(\".lossvalcolor\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.valLine(data)); // 11. Calls the line generator  \n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -30).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this \n        this.chartMargin = { top: 10, right: 10, bottom: 57, left: 45 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n        var n = data.length;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) {\n                // console.log(Math.min(d.loss, d.val_loss))\n                return Math.min(d.loss, d.val_loss)\n            }), d3.max(data, function (d) {\n                return Math.max(d.loss, d.val_loss)\n            })]) // input \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n    }\n    drawLines(svg, data) {\n\n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"lossline losstraincolor\") // Assign a class for styling  \n            .attr(\"d\", this.trainLine); // 11. Calls the line generator \n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"lossline lossvalcolor\") // Assign a class for styling  \n            .attr(\"d\", this.valLine); // 11. Calls the line generator \n\n    }\n\n    drawGraph(data) {\n        let self = this\n\n\n        // data = [{ epoch: 1, loss: 0.9578104019165039, val_loss: 0.9471035003662109, traintime: 2.247 },\n        // { epoch: 2, loss: 0.7673317790031433, val_loss: 0.8629779815673828, traintime: 0.146 },\n        // { epoch: 3, loss: 0.749285876750946, val_loss: 0.8709790110588074, traintime: 0.152 },\n        // { epoch: 4, loss: 0.7410370707511902, val_loss: 0.8575628995895386, traintime: 0.11 }]\n        // data = [{ epoch: this.CumulativeSteps, loss: 0, val_loss: 0, traintime: 0 }]\n\n        this.setupScalesAxes(data)\n\n        this.trainLine = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.loss); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.valLine = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.val_loss); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n\n\n\n        const svg = d3.select(\"div.losschart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n        this.drawLines(svg, data)\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"Training Steps\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left - 5)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"Loss\");\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        // console.log(this.props.data.data[his.props.data.data].loss.toFixed(2));\n\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendtopright p5 mediumdesc\">\n                    <div className=\"mb3\">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Train Loss</div>\n                    </div>\n                    <div>\n                        <div className=\"legendcolorbox mr5 themeorange iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Validation Loss</div>\n                    </div>\n                </div>\n                <div className=\"losschart chartsvg\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default LossChart;    ","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\n// Craft an autoencoder\nconst tf = require('@tensorflow/tfjs');\n\nexport function buildModel(params) {\n\n    const numFeatures = params.numFeatures    // Set feaetures to size of features \n    const latentDim = params.latentDim\n    const hiddenDim = params.hiddenDim\n    const outputActivation = params.outputActivation\n    const regularizationRate = params.regularizationRate\n    let layerRegularizer = null\n\n    if (params.regularizer === \"l1\") {\n        layerRegularizer = tf.regularizers.l1({ l1: regularizationRate })\n\n    } else if (params.regularizer === \"l2\") {\n        layerRegularizer = tf.regularizers.l2({ l2: regularizationRate })\n\n    } else if (params.regularizer === \"l1l2\") {\n        layerRegularizer = tf.regularizers.l1l2({ l1: regularizationRate, l2: regularizationRate })\n    }\n\n\n    // Specify encoder \n    const input = tf.input({ shape: [numFeatures] })\n    let encoderHidden = tf.layers.dense({ units: hiddenDim[0], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(input);\n    let i = 1\n    while (i < hiddenDim.length) {\n        encoderHidden = tf.layers.dense({ units: hiddenDim[i], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(encoderHidden);\n        i++\n    }\n    const z_ = tf.layers.dense({ units: latentDim }).apply(encoderHidden);\n    const encoder = tf.model({ inputs: input, outputs: z_, name: \"encoder\" })\n\n\n    // Specify decoder \n    const latentInput = tf.input({ shape: [latentDim] })\n    let decoderHidden = tf.layers.dense({ units: hiddenDim[hiddenDim.length - 1], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(latentInput);\n    let j = hiddenDim.length - 1\n    while (j > 0) {\n        j--;\n        decoderHidden = tf.layers.dense({ units: hiddenDim[j], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(decoderHidden);\n\n    }\n    const decoderOutput = tf.layers.dense({ units: numFeatures, activation: outputActivation }).apply(decoderHidden);\n    const decoder = tf.model({ inputs: latentInput, outputs: decoderOutput, name: \"decoder\" })\n\n    // link output of encoder to decoder \n    let output = decoder.apply(encoder.apply(input))\n\n    // Construct AE with both encoder and decoder\n    const ae = tf.model({ inputs: input, outputs: output, name: \"autoencoder\" })\n\n    // Compile with optimizer .. and we are done!\n    ae.compile({ optimizer: params.optimizer, loss: \"meanSquaredError\" })\n    return ae\n}\n\n\n","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n \nimport React, { Component } from \"react\";\nimport {Loading,Dropdown, Slider, Checkbox, Tooltip } from \"carbon-components-react\"\nimport \"./train.css\"\nimport * as tf from '@tensorflow/tfjs';\nimport {registerGAEvent, computeAccuracyGivenThreshold, percentToRGB } from \"../helperfunctions/HelperFunctions\"\nimport ROCChart from \"../rocchart/ROCChart\"\n// custom charts \nimport HistogramChart from \"../histogram/HistogramChart\"\nimport ScatterPlot from \"../scatterplot/ScatterPlot\"\nimport LossChart from \"../losschart/LossChart\"\nimport ComposeModel from \"../composemodel/ComposeModel\"\n\nimport { Reset16, PlayFilledAlt16, PauseFilled16 } from '@carbon/icons-react';\nimport { buildModel } from \"./models/ae\"\nimport * as _ from \"lodash\"\n\n\nclass Train extends Component {\n\n    constructor(props) {\n        super(props) \n\n        this.chartWidth = 350;\n        this.chartHeight = 250;\n\n        \n\n        // Model update method passed to model composer component\n        this.updateModelDims = this.updateModelDims.bind(this)\n\n        this.stepOptions = [{ id: \"opt4\", text: \"30\", value: 30, type: \"steps\" },{ id: \"opt1\", text: \"50\", value: 50, type: \"steps\" }, { id: \"opt2\", text: \"100\", value: 100, type: \"steps\" }]\n        this.regularizerOptions = [{ id: \"opt1\", text: \"None\", value: \"none\", type: \"regularizer\" }, { id: \"opt1\", text: \"l1\", value: \"l1\", type: \"regularizer\" }, { id: \"opt2\", text: \"l2\", value: \"l2\", type: \"regularizer\" }, { id: \"opt2\", text: \"l1l2\", value: \"l1l2\", type: \"regularizer\" }]\n        this.batchSizeOptions = [{ id: \"opt1\", text: \"64\", value: 64, type: \"batchsize\" }, { id: \"opt2\", text: \"128\", value: 128, type: \"batchsize\" }, { id: \"opt3\", text: \"256\", value: 256, type: \"batchsize\" }, { id: \"opt3\", text: \"512\", value: 512, type: \"batchsize\" }, { id: \"opt3\", text: \"1024\", value: 1024, type: \"batchsize\" }]\n        this.learningRateOptions = [{ id: \"opt1\", text: \"0.01\", value: 0.01, type: \"learningrate\" }, { id: \"opt2\", text: \"0.001\", value: 0.001, type: \"learningrate\" }, { id: \"opt3\", text: \"0.0001\", value: 0.0001, type: \"learningrate\" },{ id: \"opt5\", text: \"0.1\", value: 0.1, type: \"learningrate\" },{ id: \"opt6\", text: \"1\", value: 1, type: \"learningrate\" },{ id: \"opt7\", text: \"10\", value: 10, type: \"learningrate\" }]\n        // this.regularizationRateOptions = [ \n        //     { id: \"opt3\", text: \"0.01\", value: 0.01, type: \"regularizationrate\" },\n        //     { id: \"opt1\", text: \"0.001\", value: 0.001, type: \"regularizationrate\" },\n        //     { id: \"opt2\", text: \"0.0001\", value: 0.0001, type: \"regularizationrate\" }, \n        // ]\n        this.trainingDataOptions = [{ id: \"opt1\", text: \"500\", value: 500, type: \"traindatasize\" }, { id: \"opt2\", text: \"1000\", value: 1000, type: \"traindatasize\" }, { id: \"opt3\", text: \"2500\", value: 2500, type: \"traindatasize\" }]\n        this.testDataOptions = [{ id: \"opt1\", text: \"100\", value: 100, type: \"testdatasize\" }, { id: \"opt2\", text: \"200\", value: 200, type: \"testdatasize\" }, { id: \"opt3\", text: \"500\", value: 500, type: \"testdatasize\" }]\n        this.optimizerOptions = [\n            { id: \"opt1\", text: \"Adam\", value: \"adam\", type: \"optimizer\" },\n            { id: \"opt3\", text: \"Adamax\", value: \"adamax\", type: \"optimizer\" },\n            { id: \"opt4\", text: \"Adadelta\", value: \"adadelta\", type: \"optimizer\" },\n            { id: \"opt5\", text: \"Rmsprop\", value: \"rmsprop\", type: \"optimizer\" },\n            { id: \"opt6\", text: \"Momentum\", value: \"momentum\", type: \"optimizer\" },\n            { id: \"opt7\", text: \"sgd\", value: \"sgd\", type: \"optimizer\" },\n        ]\n        this.abnormalPercentageOptions = [\n            { id: \"opt1\", text: \"0%\", value: 0, type: \"abnormalpercentage\" },\n            { id: \"opt3\", text: \"5%\", value: 0.05, type: \"abnormalpercentage\" },\n            { id: \"opt4\", text: \"10%\", value: 0.1, type: \"abnormalpercentage\" },\n            { id: \"opt5\", text: \"20%\", value: 0.2, type: \"abnormalpercentage\" },\n            { id: \"opt2\", text: \"30%\", value: 0.3, type: \"abnormalpercentage\" },\n            { id: \"opt9\", text: \"40%\", value: 0.4, type: \"abnormalpercentage\" },\n            { id: \"opt6\", text: \"50%\", value: 0.5, type: \"abnormalpercentage\" },\n            { id: \"opt7\", text: \"70%\", value: 0.7, type: \"abnormalpercentage\" },\n        ]\n \n\n        this.selectedAbnormalPercentage = 0\n        this.selectedTrainDataOption = 0\n        this.selectedTestDataOption = 2\n        this.selectedOptimizer = 0\n\n        this.selectedRegularizer = 0\n\n        this.trainMetricHolder = []\n        this.CumulativeSteps = 0;\n\n        this.interfaceTimedDelay=  700\n\n        this.state = {\n            apptitle: \"Anomagram\",\n            isTraining: false, \n            trainLoaded: false,\n            testLoaded: false,\n            trainDataShape: [0, 0],\n            testDataShape: [0, 0],\n            mseData: [],\n            rocData: [],\n            createdModel: null,\n            encodedData: [],\n            selectedData: 0,\n\n            currentEpoch: 0,\n            numFeatures: 140,\n            hiddenLayers: 2,\n            latentDim: 2,\n            hiddenDim: [7, 3],\n            learningRate: this.learningRateOptions[0].value,\n            regularizer: this.regularizerOptions[this.selectedRegularizer].value,\n            adamBeta1: 0.5,\n            optimizer: this.optimizerOptions[this.selectedOptimizer].value,\n            outputActivation: \"sigmoid\",\n            batchSize: this.batchSizeOptions[3].value,\n            numSteps: this.stepOptions[0].value,\n            numEpochs: 1,\n\n\n            trainMetrics: this.trainMetricHolder,\n            CumulativeSteps: 0,\n            trainDataSize: this.trainingDataOptions[this.selectedTrainDataOption].value,\n            testDataSize: this.testDataOptions[this.selectedTestDataOption].value,\n\n            modelStale: true,\n            bestMetric: { acc: 0, fpr: 0, fnr: 0, tnr: 0, tpr: 0, threshold: 0, precision:0, recall:0 },\n            minThreshold: 0,\n            maxThreshold: 1,\n\n\n            showModelComposer: true,\n            showModelEvaluationMetrics: true,\n            showRocChart: true,\n            showLossChart: true,\n            showMseHistogram: true,\n            showBottleneckScatterPlot: true,\n\n\n            validateOnStep: true,\n            auc: 0,\n\n\n            showAdvanced: true,\n            showIntroduction: true,\n            showWarmingUp: true,\n\n            \n            lossChartHeight: this.chartHeight,\n            lossChartWidth: this.chartWidth,\n            abnormalPercentage: this.abnormalPercentageOptions[this.selectedAbnormalPercentage].value,\n\n            floatCapable: false,\n            floatEnabled: false,\n            isCreating: false,\n            showError: false,\n            errorMsg: \"An error has occured.\"\n \n        }\n\n        this.showOptions = [\n            { label: \"Model Composer\", action: \"composer\", checked: this.state.showModelComposer },\n            { label: \"Model Metrics\", action: \"evaluation\", checked: this.state.showModelEvaluationMetrics }, { label: \"Training Loss\", action: \"loss\", checked: this.state.showLossChart },\n            { label: \"Error Histogram\", action: \"histogram\", checked: this.state.showMseHistogram },\n            { label: \"ROC Curve\", action: \"roc\", checked: this.state.showRocChart },\n            { label: \"Bottleneck Plot\", action: \"bottleneck\", checked: this.state.showBottleneckScatterPlot },\n\n        ]\n\n\n        this.currentSteps = 0;\n\n        this.xsTrain = []\n        this.xsTest = []\n        this.yTest = []\n\n        this.trainDataPath = process.env.PUBLIC_URL + \"/data/ecg/train_scaled.json\"\n        this.testDataPath = process.env.PUBLIC_URL + \"/data/ecg/test_scaled.json\" \n        this.momentum = 0.9 \n\n        this.modelWarmedUp = false;\n        this.tensorsCreated = false;\n\n        this.trainUnmounted = false\n\n       \n    }\n\n    componentDidMount() { \n\n        this.getChartContainerSizes() \n        this.componentLoadedTime = (new Date()).getTime()\n\n\n\n        // load test and train data\n        this.fetchData(this.trainDataPath).then((trainData) => {  \n                this.trainData = trainData\n                this.setState({trainLoaded: true}) \n           \n        }).catch((error) => {\n            this.handleDataLoadError()\n            \n        });\n        \n        this.fetchData(this.testDataPath).then((testData) => {  \n                this.testData = testData\n                this.setState({testLoaded: true})\n            \n        }).catch((error) => {\n            this.handleDataLoadError()\n            \n        });\n\n    }\n\n    handleDataLoadError() {\n        // console.log(\"Failed to test data\");\n        this.setState({showError:true, errorMsg: \"Error fetching data. Please check internet connection and reload page. \"}) \n    }\n\n    fetchData(dataPath) {\n        return fetch(dataPath)\n            .catch(() => {\n               \n           })\n            .then((response) => {\n                return response.json()\n            \n        })  \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevState.isTraining !== this.state.isTraining) && this.state.isTraining === false) {\n             \n        }\n\n        if (this.currentSteps === 0 && prevState.mseData[0] !== this.state.mseData[0]) { \n            this.computeAccuracyMetrics(this.state.mseData)\n        }\n\n        if (this.state.CumulativeSteps !== prevState.CumulativeSteps) { \n            this.computeAccuracyMetrics(this.state.mseData)\n        }\n\n        // if train or test size updated, regenerate tensors\n        if (this.state.trainDataSize !== prevState.trainDataSize || this.state.testDataSize !== prevState.testDataSize || this.state.abnormalPercentage !== prevState.abnormalPercentage ) {\n            this.generateDataTensors()\n        }\n    }\n\n\n    destroyModelTensors() {\n        // Dispose all tensors used to hold model parameters\n        if (this.createdModel) {\n            // this.encoder.dispose()\n            this.createdModel.dispose()\n            this.optimizer.dispose() \n        }\n    }\n\n    componentWillUnmount() {\n        this.trainUnmounted = true\n        if (this.tensorsCreated) {\n            this.xsTest.dispose()\n            this.xsTrain.dispose() \n            this.destroyModelTensors()\n        }\n         \n        // this.xsWarmup.dispose()\n        // console.log(tf.memory()); \n    }\n    createModel() { \n\n        // dispose of existing model to release tensors from memory\n        this.destroyModelTensors()\n\n        // if Data tensors not created at all, create tensors \n        if (!this.tensorsCreated) {\n            this.generateDataTensors()\n            this.tensorsCreated = true\n        } \n\n        //construct model\n        switch (this.state.optimizer) {\n            case \"adam\":\n                this.optimizer = tf.train.adam(this.state.learningRate, this.state.adamBeta1)\n                break\n            case \"adamax\":\n                this.optimizer = tf.train.adamax(this.state.learningRate, this.state.adamBeta1)\n                break\n            case \"adadelta\":\n                this.optimizer = tf.train.adadelta(this.state.learningRate)\n                break\n            case \"rmsprop\":\n                this.optimizer = tf.train.rmsprop(this.state.learningRate)\n                break\n            case \"momentum\":\n                this.optimizer = tf.train.momentum(this.state.learningRate, this.momentum)\n                break\n            case \"sgd\":\n                this.optimizer = tf.train.sgd(this.state.learningRate)\n                break\n            default:\n                break;\n        }\n\n\n\n        let modelParams = {\n            numFeatures: this.state.numFeatures,\n            hiddenLayers: this.state.hiddenLayers,\n            latentDim: this.state.latentDim,\n            hiddenDim: this.state.hiddenDim,\n            optimizer: this.optimizer,\n            outputActivation: \"sigmoid\",\n            regularizer: this.state.regularizer,\n            regularizationRate: this.state.learningRate\n        }\n\n        this.createdModel = buildModel(modelParams)\n        this.setState({ modelStale: false, isCreating:false })\n        this.getPredictions()\n\n        \n        \n\n\n        // this.createdModel.summary()\n\n        // setTimeout(() => {\n        // this.modelWarmUp()\n        // }, 5000);\n\n        // showToast(\"success\", \"Model successfully created\")\n        // console.log(tf.memory());\n        // this.setState({showWarmingUp: false})\n    }\n\n    warmUpModel() {\n\n        // let warmUpTensor = tf.tensor2d(this.trainData[0].data,[1,140])\n         console.log(\"attempting warmup\");\n         \n        let warmUpTensor =  tf.tensor2d(this.trainData.slice(0,10).map(item => item.data\n            ), [10, this.trainData[0].data.length])\n        this.setState({ trainDataShape: this.xsTrain.shape })\n        \n        let startTime = new Date();\n        this.createdModel.fit(warmUpTensor, warmUpTensor, { epochs: 1, verbose: 0, batchSize: 512}\n        ).then(res => {\n            let endTime = new Date();\n            let elapsedTime = (endTime - startTime) / 1000\n            console.log(\"Warmup done\", elapsedTime);\n        });\n\n    }\n    trainModel() {\n        // for (let i = 0; i < this.numSteps; i++) {\n\n        this.currentSteps++;\n        //update progresssbar\n        // let progress = Math.floor((this.currentSteps / this.state.numSteps) * 100) + \"%\"\n        // this.refs[\"glowbar\"].style.width = progress;\n\n\n\n        this.CumulativeSteps++;\n        this.setState({ CumulativeSteps: this.CumulativeSteps });\n        // \n        let startTime = new Date();\n        this.createdModel.fit(this.xsTrain,\n            this.xsTrain, { epochs: this.state.numEpochs, verbose: 0, batchSize: this.state.batchSize, validationData: [this.xsTest, this.xsTest] }\n        ).then(res => {\n            let endTime = new Date();\n            let elapsedTime = (endTime - startTime) / 1000\n            // console.log(elapsedTime);\n\n            let metricRow = { epoch: this.CumulativeSteps, loss: res.history.loss[0], val_loss: res.history.val_loss[0], traintime: elapsedTime }\n            this.trainMetricHolder.push(metricRow)\n            // this.setState({ trainMetrics: this.trainMetricHolder });\n            // console.log(\"Step loss\", this.currentSteps, this.CumulativeSteps, res.history.loss[0], elapsedTime);\n           \n\n            // console.log(this.state.numSteps);\n\n            if (this.state.numSteps > this.currentSteps && this.state.isTraining && !this.trainUnmounted  && (!this.state.modelStale)) {\n                this.getPredictions();\n                this.setState({ currentEpoch: this.currentSteps })\n                this.trainModel()\n            } else {\n                 \n                \n                this.currentSteps = 0\n                this.setState({ isTraining: false })\n            }\n        });\n    }\n\n    async loadSavedModel() {\n        // TODO .. launch loadning spinnr\n        let modelPath = \"/webmodel/ecg/model.json\"\n        this.savedModel = await tf.loadLayersModel(modelPath);\n        console.log(\"model loaded\");\n        this.loadTestData()\n\n    }\n\n\n    computeAccuracyMetrics(data) {\n\n        let uniqueMse = _.uniq(_.map(data, 'mse'))\n\n        uniqueMse = _(uniqueMse).sortBy().value()\n        uniqueMse.reverse()\n\n\n\n\n        let rocMetricHolder = []\n        let rocSum = 0\n        let prevMetric = { fpr: 0, tpr: 0 }\n\n        uniqueMse.forEach((each, i) => {\n            let metric = computeAccuracyGivenThreshold(data, each)\n\n            rocMetricHolder.push(metric)\n            // if (i < uniqueMse.length) {\n            // rocSum += (prevMetric.tpr) * (metric.fpr - prevMetric.fpr)\n            rocSum += ((prevMetric.tpr + metric.tpr) / 2) * (metric.fpr - prevMetric.fpr)\n            // console.log(i, rocSum);\n            // }\n            prevMetric = metric\n\n        });\n\n        // Add point (1,1) to compute AUC\n        // use trapezium area rule to calculate area\n        if (prevMetric.fpr !== 1) {\n            rocMetricHolder.push({ fpr: 1, tpr: prevMetric.tpr })\n            rocSum += ((prevMetric.tpr + 1) / 2) * (1 - prevMetric.fpr)\n            // rocSum += prevMetric.tpr * (1 - prevMetric.fpr)\n        }\n\n\n        // console.log(rocSum, \" Region under curve\");\n        // console.log(rocMetricHolder);\n\n\n        this.setState({ rocData: rocMetricHolder })\n        this.setState({ auc: rocSum })\n        // console.log(\"mse initial\", _.min(uniqueMse), _.max(uniqueMse));\n\n        let bestMetric = _.maxBy(rocMetricHolder, \"acc\")\n        this.setState({ bestMetric: bestMetric })\n        this.setState({ minThreshold: _.min(uniqueMse) })\n        this.setState({ maxThreshold: _.max(uniqueMse) })\n\n        \n    }\n\n\n    getPredictions() {\n        let self = this;\n\n        // Get predictions \n        // let startTime = new Date()\n        let preds = this.createdModel.predict(this.xsTest, { batchSize: this.state.batchSize })\n        // let elapsedTime = (new Date() - startTime) / 1000\n        // console.log(\"prediction time\", elapsedTime);\n\n\n        //With large batchsize - 0.001, defualt batchsize .. 0.015\n        // Compute mean squared error difference between predictions and ground truth\n        const mse = tf.tidy(() => {\n            return tf.sub(preds, this.xsTest).square().mean(1)\n        })\n        // let mse = tf.sub(preds, this.xsTest).square().mean(1) //tf.losses.meanSquaredError(preds, xsTest)\n        let mseDataHolder = []\n        mse.array().then(array => {\n            array.forEach((element, i) => {\n                // console.log({ \"mse\": element, \"label\": yTest[i] });\n                mseDataHolder.push({ \"mse\": element, \"label\": this.yTest[i] })\n                // console.log(mseDataHolder.length)\n            });\n            self.setState({ mseData: mseDataHolder })\n\n            // console.log(mseDataHolder); \n\n        });\n\n\n\n        // Generate encoder output \n        this.encoder = tf.model({ inputs: this.createdModel.inputs, outputs: this.createdModel.getLayer(\"encoder\").getOutputAt(1) });\n        let encoderPredictions = this.encoder.predict(this.xsTest)\n\n\n        let encPredHolder = []\n        encoderPredictions.array().then(array => {\n            array.forEach((element, i) => {\n                encPredHolder.push({ x: element[0], y: element[1], \"label\": this.yTest[i] })\n            });\n            self.setState({ encodedData: encPredHolder })\n        })\n\n\n        preds.dispose()\n        encoderPredictions.dispose()\n        mse.dispose()\n        // console.log(tf.memory());\n\n        \n    }\n\n    updateModelDims(hiddenDims, latentDim) {\n        // console.log(hiddenDims, latentDim);\n        this.setState({ hiddenDim: hiddenDims })\n        this.setState({ latentDim: latentDim[0] })\n        this.setState({ modelStale: true })\n\n    }\n\n    // visualizeMSE(mse)\n    generateDataTensors() {\n        // console.log(\"Generating data tensor\");\n        \n        //shuffle data\n        this.trainData = _.shuffle(this.trainData)\n        this.testData = _.shuffle(this.testData)\n\n        let maxAbnormalCount = this.state.abnormalPercentage * this.state.trainDataSize;\n        let abnormalCount = 0;\n\n        let trainEcg = []\n        //Add abnormal samples\n        for (let row in this.trainData) {\n            let val = this.trainData[row] \n            if (val.target + \"\" !== 1 + \"\") {\n                if (abnormalCount < maxAbnormalCount) {\n                    trainEcg.push(val)\n                    abnormalCount++\n                }\n            }\n        }\n\n        //Add  positive normal ECG (target==1) to train json array \n        for (let row in this.trainData) {\n            let val = this.trainData[row]\n            if (val.target + \"\" === 1 + \"\") { \n                if (trainEcg.length < this.state.trainDataSize) {\n                    trainEcg.push(val)\n                } else {\n                    break\n                }\n            }  \n        }\n\n        // console.log(maxAbnormalCount, \"abnormal samples\",  abnormalCount, \"Total\", trainEcg.length);\n        \n\n        // Create train tensor from json array\n        this.xsTrain = tf.tensor2d(trainEcg.map(item => item.data\n        ), [trainEcg.length, trainEcg[0].data.length])\n        this.setState({ trainDataShape: this.xsTrain.shape })\n\n\n        // Create test data TENSOR from test data json array \n        let testData = this.testData.slice(0, this.state.testDataSize)\n        this.xsTest = tf.tensor2d(testData.map(item => item.data\n        ), [testData.length, testData[0].data.length])\n\n        // Create yLabel Tensor\n        this.yTest = testData.map(item => item.target + \"\" === 1 + \"\" ? 0 : 1)\n\n        this.setState({ testDataShape: this.xsTest.shape })\n\n    }\n\n    trainButtonClick(e) {\n        registerGAEvent(\"trainmodel\", \"trainbutton\", this.state.isTraining.toString(), this.componentLoadedTime)\n        if (this.state.isTraining) {\n            this.setState({ isTraining: false })\n        } else {\n            this.setState({ isTraining: true })\n            setTimeout(() => {\n                this.trainModel()\n            }, this.interfaceTimedDelay);\n        }\n    }\n\n    resetModelButtonClick(e) { \n        registerGAEvent(\"trainmodel\", \"compilebutton\",  \"compilebutton\", this.componentLoadedTime)\n        this.CumulativeSteps = 0 \n        this.trainMetricHolder = []\n        this.setState({\n            // showIntroduction: false,\n            isCreating: true,\n            isTraining: false,\n            CumulativeSteps: 0,\n            trainMetrics: this.trainMetricHolder \n        })\n        \n          \n       \n        // this.setState({ mseData: [] }) \n        setTimeout(() => {\n            this.createModel()\n        }, this.interfaceTimedDelay);\n        \n    }\n\n    updateModelParam(e) {\n        // model state is set to stale each time a parameter is updated.\n        registerGAEvent(\"trainmodel\", \"modelparameter\",  e.selectedItem.type, this.componentLoadedTime)\n        \n        this.setState({ modelStale: true })\n        switch (e.selectedItem.type) {\n            case \"steps\":\n                this.setState({ numSteps: e.selectedItem.value })\n                break\n            case \"batchsize\":\n                this.setState({ batchSize: e.selectedItem.value }) \n                break\n            case \"learningrate\":\n                this.setState({ learningRate: e.selectedItem.value }) \n                break\n            case \"traindatasize\":\n                this.setState({ trainDataSize: e.selectedItem.value }) \n                break\n            case \"abnormalpercentage\":\n                    this.setState({ abnormalPercentage: e.selectedItem.value }) \n                    break\n            case \"testdatasize\":\n                this.setState({ testDataSize: e.selectedItem.value })\n                break\n            case \"optimizer\":\n                this.setState({ optimizer: e.selectedItem.value }) \n                break\n            case \"regularizer\":\n                this.setState({ regularizer: e.selectedItem.value }) \n                break\n            default:\n                break\n        }\n\n\n    }\n\n\n    updateThreshold(e) {\n        if (this.state.mseData.length > 0) {\n            let threshVal = this.state.minThreshold + (e.value / 100) * (this.state.maxThreshold - this.state.minThreshold)\n            let bestMetric = computeAccuracyGivenThreshold(this.state.mseData, threshVal)\n            // console.log(e.value, this.state.mseData);\n            this.setState({ bestMetric: bestMetric })\n        }\n\n    }\n\n    \n\n    showOptionsClick(e) {\n        // console.log(e.target.checked, e.target.getAttribute(\"action\"));\n        registerGAEvent(\"trainmodel\", \"selectchart\",  e.target.getAttribute(\"action\"), this.componentLoadedTime)\n        \n        switch (e.target.getAttribute(\"action\")) {\n            case \"histogram\":\n                this.setState({ showMseHistogram: e.target.checked })\n                break\n            case \"loss\":\n                this.setState({ showLossChart: e.target.checked })\n                break\n            case \"composer\":\n                this.setState({ showModelComposer: e.target.checked })\n                break\n            case \"bottleneck\":\n                this.setState({ showBottleneckScatterPlot: e.target.checked })\n                break\n            case \"roc\":\n                this.setState({ showRocChart: e.target.checked })\n                break\n            case \"evaluation\":\n                this.setState({ showModelEvaluationMetrics: e.target.checked })\n                break\n            default:\n                break\n        }\n\n    }\n\n    toggleAdvancedDrawer(e) {\n        this.setState({ showAdvanced: !(this.state.showAdvanced) })\n    }\n\n    toggleIntroDrawer(e) {\n        this.setState({ showIntroduction: !(this.state.showIntroduction) })\n    }\n \n    getChartContainerSizes() {\n        \n\n        this.setState({ lossChartHeight: this.refs[\"modelevalbox\"].offsetHeight-  50 })\n        // this.setState({lossChartWidth: this.refs[\"modelevalbox\"].offsetWidth })\n         \n        \n    }\n\n    render() {\n        // console.log(this.state.mseData);\n        \n        \n        // Use chart state determine when to redraw model composer lines as UI has change\n        let chartState = \"\"\n        this.showOptions.forEach(data => {\n            let box = document.getElementById(data.action + \"checkboxid\")\n            if (box !== null) {\n                chartState += box.checked \n            } \n        }); \n\n         \n\n        let showCheckBoxes = this.showOptions.map((data) => {\n            return (\n                <div key={data.label + \"checkbox\"} className=\"mediumdesc iblock mr10\">\n                    <Checkbox\n                        defaultChecked={data.checked}\n                        wrapperClassName={\"mediumdesc chartchecks\"}\n                        className={\"mediumdesc \"}\n                        labelText={data.label}\n                        id={data.action + \"checkboxid\"}\n                        action={data.action}\n                        onClick={this.showOptionsClick.bind(this)}\n                    ></Checkbox>\n                </div>\n            )\n        })\n\n        let isDataLoaded = this.state.testLoaded && this.state.trainLoaded \n        let loadingText = (\n            <div className=\" pb10\">\n                Loading <span> train </span> <span> and test </span> data ... \n            </div>\n        )\n\n        let trainResetButtons = (\n            <div>\n                <div className=\"  flex flexjustifycenter pt10 \">\n\n                   \n\n                    <div className=\"iblock h100 mr5 \">\n                        <div className=\"  flex flexjustifycenter h100  \">\n                            <div className=\"\">\n                                <div\n                                    onClick={this.resetModelButtonClick.bind(this)}\n                                    className={\" circlesmall circlebutton mr5 flex flexjustifycenter clickable \" + (this.state.isTraining || !isDataLoaded ? \"  disabled\" : \"\") + \" \" + (this.state.modelStale ? \" pulse\" : \"\")}>\n                                    <Reset16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />\n\n                                </div>\n                                <div className=\" displayblock smalldesc textaligncenter pt5 \"> Compile  </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    <div className=\" iblock \">\n                        <div\n                            onClick={this.trainButtonClick.bind(this)}\n                            className={(\"iblock circlelarge circlebutton mr5 flexcolumn flex flexjustifycenter clickable \") + (this.state.modelStale || !isDataLoaded ? \" disabled\" : \"\")}>\n                            {!this.state.isTraining && <PlayFilledAlt16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                            {this.state.isTraining && <PauseFilled16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                        </div>\n                        <div className=\"smalldesc textaligncenter pt5 pb5 \"> Train &nbsp; </div>\n                    </div>\n\n                    <div ref className=\"iblock  mr10\">\n                        <div ref=\"activeloaderdiv\" className=\"resetbox\" style={{opacity: (this.state.isTraining || this.state.isCreating || !isDataLoaded ) ? 1:0, width: (this.state.isTraining || this.state.isCreating || !isDataLoaded)  ?  \"34px\": \"0px\"  }} >\n                            <Loading\n                                className=\" \"\n                                active={true}\n                                small={true}\n                                withOverlay={false}\n                            > </Loading>\n                        </div>\n\n                    </div>\n\n\n\n                </div>\n            </div>\n        )\n        let configBar = (\n            <div ref=\"modelconfigbar\" style={{ zIndex: 100 }} className={\"w100   unselectable greyhighlight  flex flexjustifyleft flexjustifycenter modelconfigbar  \" + (!isDataLoaded ? \" divdisabled\" : \"\")}>\n                <div className=\"pl10 pt10 pr10 pb5  iblock\">\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Steps <span className=\"boldtext\"> {this.state.numSteps} </span>  - {this.state.CumulativeSteps}  </div>\n                        <Dropdown\n                            id=\"epochsdropdown\" \n                            label=\"Steps\"\n                            items={this.stepOptions}\n                            initialSelectedItem={this.stepOptions[0]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Batchsize <span className=\"boldtext\"> {this.state.batchSize} </span> </div>\n                        <Dropdown\n                            id=\"batchsizedropdown\"\n                            label=\"Batch Size\"\n                            items={this.batchSizeOptions}\n                            initialSelectedItem={this.batchSizeOptions[3]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Learning Rate <span className=\"boldtext\"> {this.state.learningRate}</span>  </div>\n                        <Dropdown\n                            id=\"learningratedropdown\"\n                            label=\"Learning Rate\"\n                            items={this.learningRateOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.learningRateOptions[0]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Regularlizer <span className=\"boldtext\"> {this.state.regularizer}</span> </div>\n                        <Dropdown\n                            id=\"regularizeerdropdown\"\n                            label=\"Regularizer\"\n                            items={this.regularizerOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.regularizerOptions[this.selectedRegularizer]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div style={{ zIndex: 5000 }} className=\"iblock mr10 \">\n                        <div className=\"mediumdesc pb7 pt5\"> Optimizer <span className=\"boldtext\"> {this.state.optimizer} </span> </div>\n                        <Dropdown\n                            style={{ zIndex: 100 }}\n                            id=\"optimizerdropdown\"\n                            label=\"Optimizer\"\n                            items={this.optimizerOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.optimizerOptions[this.selectedOptimizer]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                     \n                    <div className=\"iblock mr10 borderleftdash pl10 \">\n                    {/* <div className=\"configsectiontitle smalldesc iblock mr10\">  Dataset </div> */}\n                        <div className=\"iblock\">\n                        <div className=\"mediumdesc pb7 pt5\">Train Size <span className=\"boldtext\"> {this.state.trainDataShape[0]} </span>  </div>\n                        <Dropdown\n                            id=\"trainingdatadropdown\"\n                            label=\"Training Data\"\n                            items={this.trainingDataOptions}\n                            initialSelectedItem={this.trainingDataOptions[this.selectedTrainDataOption]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                        </div>\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Abnormal % <span className=\"boldtext\"> {this.state.abnormalPercentage} </span> </div>\n                        <Dropdown\n                            id=\"abnormalpercentagedatadropdown\"\n                            label=\"Abnormal %\"\n                            items={this.abnormalPercentageOptions}\n                            initialSelectedItem={this.abnormalPercentageOptions[this.selectedAbnormalPercentage]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\">Test Size <span className=\"boldtext\"> {this.state.testDataShape[0]} </span> </div>\n                        <Dropdown\n                            id=\"testdatadropdown\"\n                            label=\"Test Data\"\n                            items={this.testDataOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.testDataOptions[this.selectedTestDataOption]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                \n                    <div className=\"   pt5 pb3\">  \n                        {this.state.modelStale && <div className=\"smallblueball pulse iblock\"></div>}\n                        {(this.state.modelStale && this.state.CumulativeSteps === 0) && <span className=\"mediumdesc\"> Select model parameters\n                        and click <span className=\"boldtext \"> Compile </span> to <span className=\"\">initialize</span> the model.</span>}\n                        {(this.state.modelStale && this.state.CumulativeSteps > 0) && <span className=\"mediumdesc\"> Model configuration has changed. Click <span className=\"boldtext \"> Compile </span> to recompile model.</span>}\n                    { !this.state.modelStale && <span className=\"mediumdesc\"> Model compiled based on selected parameters. Ready to <span className=\"boldtext\"> train </span>. </span> }\n                    </div>\n                </div>\n            </div>\n        )\n \n        if (this.state.encodedData[0]) {\n            // console.log(this.state.encodedData[0].x);\n            this.firstEncode = this.state.encodedData[0].x + this.state.encodedData[1].x\n        }\n        let compBoxSize = 0\n        if (this.refs[\"composemodelbox\"]) {\n            compBoxSize = this.refs[\"composemodelbox\"].offsetWidth\n        }\n        // console.log(compBoxSize);\n        \n        let modelComposerBlock = (\n            <div className=\"composermaindiv\">\n                 {/* // Model Composer  */}\n                {this.state.showModelComposer &&\n                        <div className=\" mr10 \">\n                            <div>\n                                <div className=\"charttitle mb5 \">\n                                    Model Composer  \n                            </div>\n                                <div>\n                                    <ComposeModel\n                                        hiddenDims={this.state.hiddenDim}\n                                        latentDim={[this.state.latentDim]}\n                                isTraining={this.state.isTraining}\n                                isUpdatable={true}\n                                        updateModelDims={this.updateModelDims}\n                                        adv={this.state.showAdvanced + \"b\" + this.state.showIntroduction.toString() + chartState + this.firstEncode + \"-\" + compBoxSize  +\"-\"+ isDataLoaded }\n                                    />\n                                </div>\n                            </div>\n                        </div>}\n            </div>\n        )\n\n        let lossChartBlock = (\n            <div>\n                {this.state.showLossChart && <div className=\"iblock mr10  h100 \" > \n                                    <div>\n                                        <div className=\"charttitle \">\n                                            Train Loss\n                                        </div>\n\n                        <div>\n                        <div className={\"positionrelative h100 \" + (this.state.trainMetrics.length <= 0 ? \" \" : \"\")} style={{ width: this.chartWidth, height: this.chartHeight }}>\n                                {this.state.trainMetrics.length <= 0 &&\n                                    <div className=\"notrainingdata\">  No training loss data yet </div>\n                                }\n                                 \n                                    {this.state.trainMetrics.length > 0 &&\n                                                    <LossChart\n                                                        data={{\n                                                            data: this.state.trainMetrics,\n                                                            chartWidth: this.chartWidth,\n                                                            chartHeight: this.state.lossChartHeight,\n                                                            epoch: this.state.CumulativeSteps\n                                                        }}\n\n                                        ></LossChart>\n                                }\n                                </div>\n                                        </div>\n                                    </div> \n                        </div>}\n            </div>\n        )\n\n        let rocChartBlock = (\n            <div>\n                {this.state.showRocChart && <div className=\"iblock mr10\">\n                            {this.state.rocData.length > 0 &&\n                                <div>\n                                    <div className=\"charttitle \">\n                                        ROC Curve [ AUC : {this.state.auc.toFixed(2)} ]\n                                    </div>\n\n                                    <div>\n                                        <ROCChart\n                                            data={{\n                                                chartWidth: this.chartWidth,\n                                                chartHeight: this.state.lossChartHeight,\n                                                data: this.state.rocData,\n                                                isTraining: this.state.isTraining,\n                                                epoch: this.state.CumulativeSteps,\n                                                auc: this.state.auc\n\n                                            }} \n                                        ></ROCChart>\n                                    </div>\n                                </div>\n                            }\n                        </div>}\n            </div>\n        )\n\n        let mseHistogramBlock = (\n            <div>\n                {this.state.showMseHistogram && <div className=\"iblock mr10 \">\n                            {this.state.mseData.length > 0 && \n                                <div>\n                                    <div className=\"charttitle\"> Histogram of Mean Square Error </  div>\n\n                                    <div>\n                                        <HistogramChart\n                                            data={{\n                                                data: this.state.mseData,\n                                                chartWidth: this.chartWidth,\n                                                chartHeight: this.state.lossChartHeight,\n                                                epoch: this.state.CumulativeSteps,\n                                                threshold: this.state.bestMetric.threshold\n                                            }}\n                                        ></HistogramChart>\n                                    </div>\n                                </div> \n                            }\n                        </div>}\n            </div>\n        )\n\n        let bottleneckScatterPlotBlock = (\n            <div>\n                 {this.state.showBottleneckScatterPlot && <div className=\"iblock mr10  \">\n                            {this.state.encodedData.length > 0 &&\n\n                                <div>\n                                    <div className=\"charttitle\"> Bottleneck Scatterplot </  div>\n\n                                    <div>\n                                        <ScatterPlot\n                                            data={{\n                                                data: this.state.encodedData,\n                                                chartWidth: this.chartWidth,\n                                                chartHeight: this.state.lossChartHeight,\n                                                epoch: this.state.CumulativeSteps\n                                            }}\n\n                                        ></ScatterPlot>\n                                    </div>\n                                </div>\n\n                            }\n                        </div>}\n            </div>\n        )\n\n        let modelMetricsBlock = (\n            <div className=\"flex  w100 pr10   \"> \n                    {(this.state.bestMetric && this.state.showModelEvaluationMetrics) &&\n\n                        <div className={\"iblock perfmetrics w100 \" + (this.state.isTraining ? \" disabled \" : \" \")}>\n                            <div className=\"charttitle mb5 \">\n                                Model Evaluation Metrics\n                            </div>\n                            <div className=\"mb5 greyhighlight p10 touchnoscroll\">\n                                <Slider\n                                    className=\"w100 border\"\n                                    min={0} //{(this.state.minThreshold.toFixed(4) * 1)}\n                                    max={100}//{(this.state.maxThreshold.toFixed(4) * 1)}\n                                    step={2}\n                                    minLabel={\"%\"}\n                                    maxLabel={\"%\"}\n                                    value={((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100}\n                                    stepMuliplier={10}\n                                    disabled={this.state.isTraining ? true : false}\n                                    labelText={\"Threshold \" + (this.state.bestMetric.threshold).toFixed(4) + \" [ \" + (((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100).toFixed(0) + \" % ] \"}\n                                    hideTextInput={true}\n                                    onChange={this.updateThreshold.bind(this)}\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.acc * 100)) }} className=\"metricguage mb5  greyhighlight accuracybox  textaligncenter mr5 flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.acc * 100).toFixed(2)}  %</div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Best Accuracy </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB((this.state.auc * 100)) }} className=\"metricguage mb5 greyhighlight  textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.auc).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> AUC </div>\n                                </div>\n\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.precision * 100)) }} className=\"metricguage mb5 greyhighlight  textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.precision ).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Precision </div>\n                        </div>\n                        \n                        <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.recall * 100)) }} className=\"metricguage mb5 greyhighlight  textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.recall).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Recall </div>\n                                </div>\n\n                            </div>\n                            <div className=\"mb5 flex\">\n\n                                <div style={{ borderLeftColor: percentToRGB(100 - (this.state.bestMetric.fpr * 100)) }} className=\"metricguage flex5 mr5  greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue textaligncenter\"> {(this.state.bestMetric.fpr * 100).toFixed(2)}  % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> False Positive Rate </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB(100 - (this.state.bestMetric.fnr * 100)) }} className=\"metricguage flex5   greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.fnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc displayblock mediumdesc p5\"> False Negative Rate </div>\n                                </div>\n\n                            </div>\n                            <div className=\"flex\">\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.tpr * 100)) }} className=\"metricguage flex5  mr5 greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tpr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mr10 mediumdesc p5\"> True Positive Rate </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.tnr * 100)) }} className=\"metricguage flex5  greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> True Negative Rate </div>\n                                </div>\n                            </div>\n\n                        </div>}\n\n                </div>\n        )\n  \n        return (\n            <div className=\"maintrainbox\">  \n                {/* {this.state.showWarmingUp && <div className=\"\">\n                    <div className=\"flex mt10 mr10 \">\n                        <div className=\"iblock  flexjustifycenter\" ref=\"activeloaderdiv\" >\n                            <div className=\"loadcircle iblock\"></div>\n                                \n                        </div> \n                       \n                        <div className=\"iblock pt3 pl5 h100 \"> Initializing model ...</div> \n                    </div>\n                </div>} */}\n\n                {/* show advanced options pannel */}\n                <div style={{ zIndex: 100 }} onClick={this.toggleIntroDrawer.bind(this)} className=\"unselectable mt10 p10 clickable  flex greymoreinfo\">\n                    <div className=\"iblock flexfull minwidth485\">\n                        <strong>\n                            {!this.state.showIntroduction && <span>&#x25BC;  </span>} {this.state.showIntroduction && <span>&#x25B2;  </span>}\n                        </strong>\n                        Introduction\n                    </div>\n                    <div className=\"iblock   \">\n                        <div className=\"iblock mr5\"> <span className=\"boldtext\"> {} </span></div>\n                        <div className=\"iblock\">\n                            <div className=\"smalldesc\"> Overview of how it works!</div>\n                        </div>\n                    </div>\n\n                </div>\n\n\n                {(this.state.showIntroduction) &&\n                    <div className=\"mynotif h100 lh10 mt10 lightbluehightlight maxh16  mb10\">\n                        <div className=\"boldtext\"> Train an Autoencoder for Anomaly Detection </div>\n                        <div>\n                            <a href=\"https://en.wikipedia.org/wiki/Autoencoder\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                Autoencoders</a> are neural networks which learn to reconstruct input data. We can leverage this property to detect anomalies.\n                                <div className=\"circlenumber iblock textaligncenter\"> 1 </div>  <span className=\"boldtext\"> Compile Model . </span> Select model parameters\n                            (number of layers, batchsize, learning rate, regularizer etc) and then click <span className=\"italics\">compile</span> to initialize the model. \n                        \n                            <strong className=\"greycolor\"> Hint</strong>: You can add/remove layers and units to \n                            the autoencoder using  the visual model composer + and - buttons. Remember to click <span className=\"italics\">compile</span> after every change!\n                        <div className=\"circlenumber iblock textaligncenter\"> 2 </div>  <span className=\"boldtext\"> Train. </span> This trains the autoencoder using normal data \n                        samples from the ECG5000 dataset.  Training the model on a dataset that consists of mainly normal data (an assumption that holds for most anomaly use cases), \n                        the model learns to reconstruct only normal data samples with very little reconstruction error. \n                        To mirror your use case conditions, you can specify the percentage of abnormal samples \n                        to include in the training data set and observe how it affects accuracy.\n                        <div className=\"circlenumber iblock textaligncenter\"> 3 </div>  <span className=\"boldtext\"> Evaluate. </span> \n                        At each training step, visualize the reconstruction error (mse) generated for each sample in the test dataset. Observe that mse is higher\n                        for abnormal samples compared to abnormal samples. We can select a threshold and flag samples with an mse > threshold as anomalies. \n                        Model performance can then be evaluated using metrics such has AUC, Precision, Recall, TPR, TNR, FPR, FNR ; also observe how these metrics vary with different\n                        choices of threshold.\n         \n                     </div>\n\n                    </div>}\n\n                \n                {(this.state.showError && !(this.state.testLoaded && this.state.trainLoaded ))&&\n                    <div className=\"errordiv p10 mb10\"> \n                        {this.state.errorMsg}\n                    </div>\n                }\n                {/* show advanced options pannel */}\n                <div style={{ zIndex: 100 }} onClick={this.toggleAdvancedDrawer.bind(this)} className=\"unselectable mt10 p10 clickable  flex greymoreinfo\">\n                    <div className=\"iblock flexfull minwidth485\">\n                        <strong>\n                            {!this.state.showAdvanced && <span>&#x25BC;  </span>} {this.state.showAdvanced && <span>&#x25B2;  </span>}\n                        </strong>\n                        Select model configuration and visualization charts.\n                    </div>\n                    <div className=\"iblock   \">\n                        <div className=\"iblock mr5\"> <span className=\"boldtext\"> {} </span></div>\n                        <div className=\"iblock\">\n                            <div className=\"smalldesc\"> \n                                \n                                {this.state.hiddenDim.length} Layer Autoencoder\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                \n\n                {(this.state.showAdvanced) &&\n                    <div className=\" modelconfigdiv p10 \"> \n                        { !isDataLoaded &&  loadingText}\n\n                        <div className=\"flex flexwrap \">\n                            <div className=\"flexwrapitem\">\n                                {trainResetButtons}\n                            </div>\n                            <div className=\"flexwrapitem flexfull \">\n                                {configBar}\n                        </div>\n                       \n                        </div>\n\n                        <div className=\"pl10 pt5 pr10 pb5 greyborder mt10\">\n                            <div className=\"boldtext  iblock mr5\">\n                                {/* <div className=\"iblock \"> Charts </div> */}\n                                <div className=\"iblock boldtext  \">\n                                    <Tooltip\n                                        direction=\"right\"\n                                        triggerText=\"Select Charts\"\n                                    >\n                                        <div className=\"tooltiptext\">\n                                            Add/Remove charts that visualize the state of the model as training progresses.\n                                            For example, the Training Loss chart shows the \"loss\" or error of the model as training progresses.\n                                        </div>\n\n                                    </Tooltip>\n                                </div>\n\n                            </div>\n                            {showCheckBoxes}\n                        </div>\n\n                    </div>\n                }\n                <div ref=\"glowbar\" className={\"glowbar w0 \"} style={{ width: Math.floor((this.currentSteps / this.state.numSteps) * 100) + \"%\" }}></div>\n \n                <div ref=\"chartcontainer\" className=\"flex chartcontainer flexwrap mt10\">\n                    {this.state.showModelComposer && <div ref=\"composemodelbox\" action=\"composer\"  className={\"traincomposerdiv flexwrapitem \" + (this.state.showModelComposer ? \" flex40\":\"\")}> {modelComposerBlock} </div>}\n                    {this.state.showModelEvaluationMetrics &&  <div ref=\"modelevalbox\" action=\"metrics\" className={\"flexwrapitem \" + (this.state.showModelEvaluationMetrics ? \" flexfull\":\"\")}> {modelMetricsBlock} </div>}\n                    <div ref=\"lossbox1\" action=\"loss\"  className=\"  flexwrapitem \"> { lossChartBlock} </div>\n                    <div action=\"mse\" className=\"flexwrapitem  \"> {mseHistogramBlock} </div>\n                    {/* <div className=\"flex20 flexpushout\"></div> */}\n                    \n                    {(this.state.rocData.length > 0 && this.state.encodedData.length >0) &&\n                        <div className=\"   iblock flex20\">\n                            <div action=\"roc\" className=\"flexwrapitem  iblock \"> {rocChartBlock} </div>\n                            <div action=\"bottleneck\"  className=\"flexwrapitem   iblock\"> {bottleneckScatterPlotBlock} </div>\n\n                         </div>\n                    }\n                </div>\n                \n                 \n               \n                \n                {\n                     \n                    // <div className=\"mediumdesc p10\"> \n                    //    Textures in use - Flaot32 Capable ? {this.state.floatCapable.toString()} | {this.state.floatEnabled.toString()}\n                    // </div>\n                }\n                <br />\n                <br />\n                <br />\n\n            </div >\n        );\n    }\n}\n\nexport default Train;","/**\n * @license\n * Copyright 2019 Victor Dibia. https://github.com/victordibia\n * Anomagram - Anomagram: Anomaly Detection with Autoencoders in the Browser.\n * Licensed under the MIT License (the \"License\"); \n * =============================================================================\n */\n\n\nimport React, { Component } from \"react\";\nimport {\n    Route,\n    HashRouter,\n\n} from \"react-router-dom\";\nimport ReactGA from 'react-ga';\n\nimport \"./template.css\"\n\n// import Sidebar from \"./Sidebar\";\nimport AppHeader from \"./header/AppHeader\";\nimport Footer from \"./footer/Footer\";\nimport Viz from \"./viz/Viz\";\nimport Train from \"./train/Train\"\n\nimport { createBrowserHistory } from 'history';\n\n\nReactGA.initialize(\"UA-131578973-2\")\nconst history = createBrowserHistory({\n    basename: \"\", // The base URL of the app (see below)\n    forceRefresh: false, // Set true to force full page refreshes\n    keyLength: 6, // The length of location.key\n    // A function to use to confirm navigation with the user (see below)\n    getUserConfirmation: (message, callback) => callback(window.confirm(message))\n});\nhistory.listen(location => {\n    ReactGA.set({ page: location.hash })\n    ReactGA.pageview(location.hash)\n    // console.log(location.pathname, location.hash)\n})\n\nlet linkHolder = {}\n\nfunction updateLh(location) {\n\n    if (location.hash in linkHolder) {\n        linkHolder[location.hash] = linkHolder[location.hash] + 1\n    } else {\n        linkHolder[location.hash] = 0\n    }\n\n}\n\nhistory.listen(location => {\n    updateLh(location)\n});\n\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        }\n\n        // console.log(window.location)\n        updateLh(window.location)\n    }\n\n    componentDidMount() {\n        // ReactGA.pageview(window.location.hash)\n        // document.title = \"Image Analysis Explorer | Explore Convolutional Neural Nets for Imagee Analysis\";\n    }\n\n\n\n\n\n\n    render() {\n\n\n        return (\n            <HashRouter>\n                <AppHeader></AppHeader>\n\n                <main className=\"container-fluid p10\">\n                    <Route exact path=\"/\" component={Viz} />\n                    <Route exact path=\"/train\" component={Train} />\n\n                </main>\n                <div id=\"footer\"> <Footer /> </div>\n            </HashRouter>\n\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./components/Main\";\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./components/template.scss\"\n// import 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <Main />,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register()"],"sourceRoot":""}